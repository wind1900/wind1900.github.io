<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ᕦʕ •ᴥ•ʔᕤ</title>
    <link>https://wind1900.github.io/</link>
    <description>Recent content on ᕦʕ •ᴥ•ʔᕤ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>wind1900</copyright>
    <lastBuildDate>Sun, 19 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://wind1900.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FISHunt总结二</title>
      <link>https://wind1900.github.io/puzzlehunt/fishunt%E6%80%BB%E7%BB%93%E4%BA%8C/</link>
      <pubDate>Sun, 19 May 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/fishunt%E6%80%BB%E7%BB%93%E4%BA%8C/</guid>
      <description>第六题 与波洛克共进一餐 很久没更新，因为还是想抓紧拿到蓝带。 这道题其实不难，但是你需要了解和艺术馆有关的新闻：近期一些环保主义者将各种食物泼到名画上，找到对应的画作即可提取出答案。&#xA;Meta 元境 这道题虽然第一步解出来了大部分字母，但是当时没拼出来完整的句子，于是根据提示里得到的信息直接从第二步开始做了。&#xA;此时从标题元境得知这是个展览，需要找到参加展览的不同国家的地图去匹配，但要注意这里要找的并不是世界地图！我就卡在了这里，实际要找的是展览区域的地图，然后将匹配的国家的展览主题找出来，提取就行了。&#xA;最后一步需要用到十个小题标题上的画了，它们都和这个主题展之前某一届的主题海报非常类似。最后再根据FISHUNT的主题海报（正好有十条波浪），按照年份从新到老将这些主题的名字排列，用海报中的鱼做对角线提取，得到最终结果，完赛！</description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
第六题 与波洛克共进一餐
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>很久没更新，因为还是想抓紧拿到蓝带。
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.2doiupk0p6.webp"/>
</figure>

这道题其实不难，但是你需要了解和艺术馆有关的新闻：近期一些环保主义者将各种食物泼到名画上，找到对应的画作即可提取出答案。</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
Meta 元境
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>这道题虽然第一步解出来了大部分字母，但是当时没拼出来完整的句子，于是根据提示里得到的信息直接从第二步开始做了。<br>
此时从标题元境得知这是个展览，需要找到参加展览的不同国家的地图去匹配，但要注意这里要找的并不是世界地图！我就卡在了这里，实际要找的是展览区域的地图，然后将匹配的国家的展览主题找出来，提取就行了。<br>
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.9nzm5taww8.webp"/>
</figure>

最后一步需要用到十个小题标题上的画了，它们都和这个主题展之前某一届的主题海报非常类似。最后再根据FISHUNT的主题海报（正好有十条波浪），按照年份从新到老将这些主题的名字排列，用海报中的鱼做对角线提取，得到最终结果，完赛！</p>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>FISHunt总结一</title>
      <link>https://wind1900.github.io/puzzlehunt/fishunt%E6%80%BB%E7%BB%93%E4%B8%80/</link>
      <pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/fishunt%E6%80%BB%E7%BB%93%E4%B8%80/</guid>
      <description>简介 这是一个小型的解谜活动，题目出在微信公众号上，比赛时间是3月29日晚8点到3月31日晚8点。一共也就两天时间，不过这次我们成功完赛了，在比赛结束前的80分钟。 这次的题目主题很明确，都和美术艺术有关，而且难度适中，没有讨厌的谐音梗网络梗，每道题基本上都需要两步以上才能得到最终答案。通过这次活动欣赏到了许多著名艺术作品。&#xA;第一题 细密画 这幅细密画颇有异域风情，画家细细描绘每一个场景。传说只有正确地连接局部，才能揭开画作的真正面貌…… 都是一些字谜&#xA;第一排 虚线内的格子应填入相同的形状，只是角度不同，易得“浮”字 倜傥和隽永部分合在一起，为“雕”字 单人旁和象组合成“像”字 口里有个冬，为“图”字 下面的横杠为减的意思，六七指的是笔画的第六七画，减去后得到“纹” 一个有两个读音的多音字，为“乐” 成语是双管齐下，为“管” 墨汁减去土，剩下为“黑” 第二排 金木水火土少了“木” 一个反的片，片加反为“版” 蓝色的线开始没想到什么意思，后来想到了是镜面，镜像补全后为“画” 成语是两肋插刀，为“插” 把数字和图画都转换成汉字，十十亻七为“花”字 这个是最后一个想到的，一开始以为是这个字是什么目，其实就是目眩来表示眼睛发花，图中少的部分拼到一起为“弦” 多音字，为“和” 箭头右边繁体字比简体字多出来的部分，找到这个字为“声”，繁体字是聲 第三排 箭头右边为运算符号相似的汉字，减号即为“一”字 镜像补全后为“宣” 就是个“纸”字，图片没其它意思。。 黄色方框和下面的方框有双箭头连结，下面弓箭加豆为短，短相反为长，弓加长为“张” 搜索易得“恭” 琴瑟，取“琴”字 土字去掉第三画，为“十” 左边的字都能与右边字组成ABAC形式的词，第三个是可歌可泣，问号是“歌” 第四排 阔别，图中少了舌和刂，组成“刮” 这个图解释了遇到减数字应该怎么做，刃去掉第三画为“刀” 四排二列是刀，上面加上前为“剪” 车口耳组成“辑” 迅速的交集，即相同的部分为辶，铭和奖相同的部分为夕，四排七列倒过来为罒，组成“逻” 镜像补全后为“曲” 目和眼意思相同，问号为“目” 肥皂剧是电视剧，问号为“剧” 第五排 二排一列为木，四排七列为目，组成“相” 蓝分成上中下三部分，取中间的部分下面加上见，为“览” 伞去掉三四五画为“个” 西二小，组成“票” 扌石组成“拓” 十十豆又组成“鼓” 学去掉一三画为“字” 这个一开始我以为右下角是一寸照片，后来猜想到一横还是减号，是冠减去寸，和耳丶组成“院” 第六排 二十为廿，两个倒过来组成“册” 易得“博” 这里说明了双箭头代表反义，黄色区域里是相同的部分为八，父和公的反义都为母 甲倒过来，加上耳为“邮” 山东简称鲁，去掉日为“鱼” 星空又名星月夜，月加空为“腔” 五个口，注意连结部分，组成“唱” 反战，图中少了又戈，组成“戏” 现在第一步做完了，接下来按照题目中说的连接局部就可以了，其实在填字的过程中也会发现有些相邻的字可以组成词语。连接的时候不用考虑方向，连成无向图即可。在连完后，连通的字与孤立的字表达的意思显而易见。</description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
简介
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>这是一个小型的解谜活动，题目出在<a href="https://mp.weixin.qq.com/s/6Iw1aLHo1OkqGeOO5Tgj3A">微信公众号</a>上，比赛时间是3月29日晚8点到3月31日晚8点。一共也就两天时间，不过这次我们成功完赛了，在比赛结束前的80分钟。
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.1setb9vzq6.webp"/>
</figure>

这次的题目主题很明确，都和美术艺术有关，而且难度适中，没有讨厌的谐音梗网络梗，每道题基本上都需要两步以上才能得到最终答案。通过这次活动欣赏到了许多著名艺术作品。</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
第一题 细密画
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>这幅细密画颇有异域风情，画家细细描绘每一个场景。传说只有正确地连接局部，才能揭开画作的真正面貌……
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.2h82vblx64.webp"/>
</figure>

都是一些字谜</p>
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
第一排
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<ol>
<li>虚线内的格子应填入相同的形状，只是角度不同，易得“浮”字</li>
<li>倜傥和隽永部分合在一起，为“雕”字</li>
<li>单人旁和象组合成“像”字</li>
<li>口里有个冬，为“图”字</li>
<li>下面的横杠为减的意思，六七指的是笔画的第六七画，减去后得到“纹”</li>
<li>一个有两个读音的多音字，为“乐”</li>
<li>成语是双管齐下，为“管”</li>
<li>墨汁减去土，剩下为“黑”</li>
</ol>
</div>
</div>
<div id="outline-container-headline-4" class="outline-3">
<h3 id="headline-4">
第二排
</h3>
<div id="outline-text-headline-4" class="outline-text-3">
<ol>
<li>金木水火土少了“木”</li>
<li>一个反的片，片加反为“版”</li>
<li>蓝色的线开始没想到什么意思，后来想到了是镜面，镜像补全后为“画”</li>
<li>成语是两肋插刀，为“插”</li>
<li>把数字和图画都转换成汉字，十十亻七为“花”字</li>
<li>这个是最后一个想到的，一开始以为是这个字是什么目，其实就是目眩来表示眼睛发花，图中少的部分拼到一起为“弦”</li>
<li>多音字，为“和”</li>
<li>箭头右边繁体字比简体字多出来的部分，找到这个字为“声”，繁体字是聲</li>
</ol>
</div>
</div>
<div id="outline-container-headline-5" class="outline-3">
<h3 id="headline-5">
第三排
</h3>
<div id="outline-text-headline-5" class="outline-text-3">
<ol>
<li>箭头右边为运算符号相似的汉字，减号即为“一”字</li>
<li>镜像补全后为“宣”</li>
<li>就是个“纸”字，图片没其它意思。。</li>
<li>黄色方框和下面的方框有双箭头连结，下面弓箭加豆为短，短相反为长，弓加长为“张”</li>
<li>搜索易得“恭”</li>
<li>琴瑟，取“琴”字</li>
<li>土字去掉第三画，为“十”</li>
<li>左边的字都能与右边字组成ABAC形式的词，第三个是可歌可泣，问号是“歌”</li>
</ol>
</div>
</div>
<div id="outline-container-headline-6" class="outline-3">
<h3 id="headline-6">
第四排
</h3>
<div id="outline-text-headline-6" class="outline-text-3">
<ol>
<li>阔别，图中少了舌和刂，组成“刮”</li>
<li>这个图解释了遇到减数字应该怎么做，刃去掉第三画为“刀”</li>
<li>四排二列是刀，上面加上前为“剪”</li>
<li>车口耳组成“辑”</li>
<li>迅速的交集，即相同的部分为辶，铭和奖相同的部分为夕，四排七列倒过来为罒，组成“逻”</li>
<li>镜像补全后为“曲”</li>
<li>目和眼意思相同，问号为“目”</li>
<li>肥皂剧是电视剧，问号为“剧”</li>
</ol>
</div>
</div>
<div id="outline-container-headline-7" class="outline-3">
<h3 id="headline-7">
第五排
</h3>
<div id="outline-text-headline-7" class="outline-text-3">
<ol>
<li>二排一列为木，四排七列为目，组成“相”</li>
<li>蓝分成上中下三部分，取中间的部分下面加上见，为“览”</li>
<li>伞去掉三四五画为“个”</li>
<li>西二小，组成“票”</li>
<li>扌石组成“拓”</li>
<li>十十豆又组成“鼓”</li>
<li>学去掉一三画为“字”</li>
<li>这个一开始我以为右下角是一寸照片，后来猜想到一横还是减号，是冠减去寸，和耳丶组成“院”</li>
</ol>
</div>
</div>
<div id="outline-container-headline-8" class="outline-3">
<h3 id="headline-8">
第六排
</h3>
<div id="outline-text-headline-8" class="outline-text-3">
<ol>
<li>二十为廿，两个倒过来组成“册”</li>
<li>易得“博”</li>
<li>这里说明了双箭头代表反义，黄色区域里是相同的部分为八，父和公的反义都为母</li>
<li>甲倒过来，加上耳为“邮”</li>
<li>山东简称鲁，去掉日为“鱼”</li>
<li>星空又名星月夜，月加空为“腔”</li>
<li>五个口，注意连结部分，组成“唱”</li>
<li>反战，图中少了又戈，组成“戏”</li>
</ol>
<p>现在第一步做完了，接下来按照题目中说的连接局部就可以了，其实在填字的过程中也会发现有些相邻的字可以组成词语。连接的时候不用考虑方向，连成无向图即可。在连完后，连通的字与孤立的字表达的意思显而易见。</p>
</div>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>三月总结</title>
      <link>https://wind1900.github.io/ctf/%E4%B8%89%E6%9C%88%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/ctf/%E4%B8%89%E6%9C%88%E6%80%BB%E7%BB%93/</guid>
      <description>摘要 三月的大部分时间都花在了两个兴趣上，而因此容易废寝忘食&#xA;总结 月初和月底分别参加了两个puzzle hunt活动，一次差一点完赛，一次在最后时刻完赛 另外在pwncollege拿到了绿带，还剩最后的蓝带了 两则趣事 有一天正在做题的时候，终端突然出现了一堆乱码，什么命令都没有反应，像是服务器中病毒了一样。后来发现好像是在播放一个视频，有熟悉的Yan的房间，还有一些红字，写的1,000,000 Solves&#xA;后来才知道，原来是平台达到了一百万次成功提交进行的庆祝，而这第一百万次，应该是我触发的。为什么这么说呢，Yan发了一条状态说道&amp;#34;The millionth flag was from level 84 of the Program Interaction module&amp;#34;，这正是我当时正在刷的题，而且是从后往前做，做的速度特别快。相当于中了次彩票 绿带最后的题目都有一些难度，因此我会去discord里看看其他人的讨论，有一次无意中浏览到私聊信息，发现竟然有人给我留言，是问之前的题目的（据说是从最近做题记录上找到的我），但已经是五天前的了。没想到在网上还能认识新朋友，后来与这位外国友人交流了很多题目。本来想着拿到蓝带以后再去帮忙解答问题，现在就能帮到别人，也是非常开心的&#xA;计划 接下来重心要放在找工作相关的，不能把全部时间用去做题了，不过还是希望能在六月拿到蓝带，再试着参加一些比赛并随缘找队友&#xA;结语 植树节也在三月，大概是这个时候适合种树吧，那么种树第二好的时间是什么时候呢？</description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
摘要
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>三月的大部分时间都花在了两个兴趣上，而因此容易废寝忘食</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
总结
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>月初和月底分别参加了两个puzzle hunt活动，一次差一点完赛，一次在最后时刻完赛
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.syourrvax.webp"/>
</figure>

<figure><img src="https://wind1900.github.io/picx-images-hosting/image.1setb9vzq6.webp"/>
</figure>

另外在pwncollege拿到了绿带，还剩最后的蓝带了
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.8s32tt1vof.webp"/>
</figure>
</p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-2">
<h2 id="headline-3">
两则趣事
</h2>
<div id="outline-text-headline-3" class="outline-text-2">
<p>有一天正在做题的时候，终端突然出现了一堆乱码，什么命令都没有反应，像是服务器中病毒了一样。后来发现好像是在播放一个视频，有熟悉的Yan的房间，还有一些红字，写的1,000,000 Solves</p>
<p>
后来才知道，原来是平台达到了一百万次成功提交进行的庆祝，而这第一百万次，应该是我触发的。为什么这么说呢，Yan发了一条<a href="https://defcon.social/@Zardus/111865419819488221">状态</a>说道&#34;The millionth flag was from level 84 of the Program Interaction module&#34;，这正是我当时正在刷的题，而且是从后往前做，做的速度特别快。相当于中了次彩票
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.sypyqzlnc.webp"/>
</figure>

<figure><img src="https://wind1900.github.io/picx-images-hosting/eefdbf4c2d318506f863715cefca7fa.9kfybjt5eg.webp"/>
</figure>
</p>
<p>
绿带最后的题目都有一些难度，因此我会去discord里看看其他人的讨论，有一次无意中浏览到私聊信息，发现竟然有人给我留言，是问之前的题目的（据说是从最近做题记录上找到的我），但已经是五天前的了。没想到在网上还能认识新朋友，后来与这位外国友人交流了很多题目。本来想着拿到蓝带以后再去帮忙解答问题，现在就能帮到别人，也是非常开心的</p>
</div>
</div>
<div id="outline-container-headline-4" class="outline-2">
<h2 id="headline-4">
计划
</h2>
<div id="outline-text-headline-4" class="outline-text-2">
<p>接下来重心要放在找工作相关的，不能把全部时间用去做题了，不过还是希望能在六月拿到蓝带，再试着参加一些比赛并随缘找队友</p>
</div>
</div>
<div id="outline-container-headline-5" class="outline-2">
<h2 id="headline-5">
结语
</h2>
<div id="outline-text-headline-5" class="outline-text-2">
<p>植树节也在三月，大概是这个时候适合种树吧，那么种树第二好的时间是什么时候呢？</p>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>江湖解谜总结四</title>
      <link>https://wind1900.github.io/puzzlehunt/%E6%B1%9F%E6%B9%96%E8%A7%A3%E8%B0%9C%E6%80%BB%E7%BB%93%E5%9B%9B/</link>
      <pubDate>Wed, 13 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/%E6%B1%9F%E6%B9%96%E8%A7%A3%E8%B0%9C%E6%80%BB%E7%BB%93%E5%9B%9B/</guid>
      <description>这应该是这次总结的最后一道题了，第三部分的其它题要么太难要么太简单。这道题是和队友一起做的，主要时间花在了搜索和填词，整个思路比较有意思&#xA;门生擂台 经文残本 这是散落各处的经文残本。相传，为了保守其中蕴藏的秘密，弟子们将全卷拆开后，留下了一部分用以相互印证&#xA;封面 动物 国家 美国州 古罗马军事家 布拉德·皮特主演电影 群岛 西班牙省份 日本料理 幻之宝可梦 航天器 体育项目 文学名著 披头士歌曲 仪器 碎片 AND ER GA GE GONE HIP I IALA INGBE IPPI ISLANDDS JIKIS K L LLI MA MI MOMET N ND R RAGO S S SA SMAR SSMITH SU TAL TAMUS TH THTHE YA 这个题就是用下面的碎片组词，最后正好可以拼成14个单词对应上面的14个类型。最开始的时候可以选择比较简单的封面或者碎片，比如布拉德·皮特主演电影，JIKIS，TAMUS 电影是Mr. &amp;amp; Mrs. Smith，碎片里有SSMITH，但是却找不到前面的Mr &amp;amp; Mr。另外用搜词网站https://nutrimatic.org/ 搜索JIKIS最有可能的词是国家tajikistan，碎片里却找不到两边的ta和tan。而搜索TAMUS出来最有可能的是动物hippopotamus，碎片里还有HIP，少了popo 这时候尝试把少的部分也都列出来，结果突然发现&#xA;封面 单词 碎片 缺少部分 动物 hippopotamus HIP TAMUS popo 国家 tajikistan JIKIS ta tan 美国州 mississippi MI IPPI ssiss 布拉德·皮特主演电影 Mr.</description>
      <content:encoded><![CDATA[
<p>这应该是这次总结的最后一道题了，第三部分的其它题要么太难要么太简单。这道题是和队友一起做的，主要时间花在了搜索和填词，整个思路比较有意思</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
门生擂台
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<div id="outline-container-headline-2" class="outline-3">
<h3 id="headline-2">
经文残本
</h3>
<div id="outline-text-headline-2" class="outline-text-3">
<p>这是散落各处的经文残本。相传，为了保守其中蕴藏的秘密，弟子们将全卷拆开后，留下了一部分用以相互印证</p>
<div id="outline-container-headline-3" class="outline-4">
<h4 id="headline-3">
封面
</h4>
<div id="outline-text-headline-3" class="outline-text-4">
<ul>
<li>动物</li>
<li>国家</li>
<li>美国州</li>
<li>古罗马军事家</li>
<li>布拉德·皮特主演电影</li>
<li>群岛</li>
<li>西班牙省份</li>
<li>日本料理</li>
<li>幻之宝可梦</li>
<li>航天器</li>
<li>体育项目</li>
<li>文学名著</li>
<li>披头士歌曲</li>
<li>仪器</li>
</ul>
</div>
</div>
<div id="outline-container-headline-4" class="outline-4">
<h4 id="headline-4">
碎片
</h4>
<div id="outline-text-headline-4" class="outline-text-4">
<table>
<tbody>
<tr>
<td>AND</td>
<td>ER</td>
<td>GA</td>
<td>GE</td>
<td>GONE</td>
<td>HIP</td>
<td>I</td>
</tr>
<tr>
<td>IALA</td>
<td>INGBE</td>
<td>IPPI</td>
<td>ISLANDDS</td>
<td>JIKIS</td>
<td>K</td>
<td>L</td>
</tr>
<tr>
<td>LLI</td>
<td>MA</td>
<td>MI</td>
<td>MOMET</td>
<td>N</td>
<td>ND</td>
<td>R</td>
</tr>
<tr>
<td>RAGO</td>
<td>S</td>
<td>S</td>
<td>SA</td>
<td>SMAR</td>
<td>SSMITH</td>
<td>SU</td>
</tr>
<tr>
<td>TAL</td>
<td>TAMUS</td>
<td>TH</td>
<td>THTHE</td>
<td>YA</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>
这个题就是用下面的碎片组词，最后正好可以拼成14个单词对应上面的14个类型。最开始的时候可以选择比较简单的封面或者碎片，比如布拉德·皮特主演电影，JIKIS，TAMUS <br>
电影是Mr. &amp; Mrs. Smith，碎片里有SSMITH，但是却找不到前面的Mr &amp; Mr。另外用搜词网站<a href="https://nutrimatic.org/">https://nutrimatic.org/</a> 搜索JIKIS最有可能的词是国家tajikistan，碎片里却找不到两边的ta和tan。而搜索TAMUS出来最有可能的是动物hippopotamus，碎片里还有HIP，少了popo <br>
这时候尝试把少的部分也都列出来，结果突然发现</p>
<table>
<tbody>
<tr>
<td>封面</td>
<td>单词</td>
<td>碎片</td>
<td>缺少部分</td>
</tr>
<tr>
<td>动物</td>
<td>hippopotamus</td>
<td>HIP TAMUS</td>
<td>popo</td>
</tr>
<tr>
<td>国家</td>
<td>tajikistan</td>
<td>JIKIS</td>
<td>ta tan</td>
</tr>
<tr>
<td>美国州</td>
<td>mississippi</td>
<td>MI IPPI</td>
<td>ssiss</td>
</tr>
<tr>
<td>布拉德·皮特主演电影</td>
<td>Mr. &amp; Mrs. Smith</td>
<td>SSMITH</td>
<td>Mr. &amp; Mr</td>
</tr>
</tbody>
</table>
<p>缺少的部分应该都是两个字母重复两次！碎片里还有N，AND和I可以放在上面使它们满足条件。于是按照这个规律继续搜索下面的每个分类，找的过程中我发现把wiki的文本全部复制下来再用正则表达式匹配比人工找快多了。最后填的结果如下</p>
<table>
<tbody>
<tr>
<td>封面</td>
<td>单词</td>
<td>碎片</td>
<td>缺少部分</td>
</tr>
<tr>
<td>动物</td>
<td>hippopotamus</td>
<td>HIP TAMUS</td>
<td>popo</td>
</tr>
<tr>
<td>国家</td>
<td>tajikistan</td>
<td>JIKIS N</td>
<td>ta ta</td>
</tr>
<tr>
<td>美国州</td>
<td>mississippi</td>
<td>MI I IPPI</td>
<td>ss ss</td>
</tr>
<tr>
<td>古罗马军事家</td>
<td>Gaius Marius</td>
<td>GA SMAR S</td>
<td>iu iu</td>
</tr>
<tr>
<td>布拉德·皮特主演电影</td>
<td>Mr. &amp; Mrs. Smith</td>
<td>AND SSMITH</td>
<td>mr mr</td>
</tr>
<tr>
<td>群岛</td>
<td>ryukyu Islands</td>
<td>R K ISLANDS</td>
<td>yu yu</td>
</tr>
<tr>
<td>西班牙省份</td>
<td>Zaragoza</td>
<td>RAGO</td>
<td>za za</td>
</tr>
<tr>
<td>日本料理</td>
<td>Sukiyaki</td>
<td>SU YA</td>
<td>ki ki</td>
</tr>
<tr>
<td>幻之宝可梦</td>
<td>Melmetal</td>
<td>L TAL</td>
<td>me me</td>
</tr>
<tr>
<td>航天器</td>
<td>satellite</td>
<td>SA LLI</td>
<td>te te</td>
</tr>
<tr>
<td>体育项目</td>
<td>martial arts</td>
<td>MA IALA S</td>
<td>rt rt</td>
</tr>
<tr>
<td>文学名著</td>
<td>Gone with the wind</td>
<td>GONE THTHE ND</td>
<td>wi wi</td>
</tr>
<tr>
<td>披头士歌曲</td>
<td>Getting Better</td>
<td>GE INGBE ER</td>
<td>tt tt</td>
</tr>
<tr>
<td>仪器</td>
<td>thermometer</td>
<td>TH MOMET</td>
<td>er er</td>
</tr>
</tbody>
</table>
<p>下一步呢，把缺少的两个字母都连起来，发现可以组成四个词potassimu，ryuzaki，meter，twitter，这几个词都有一个字母可以与其对应：KLMX <br>
本以为做到这就结束了，没想到提交答案得到回复目前为止完全正确，继续加油。接下来应该做什么，联想到这道题的规律，应该是在KLMX里重复两次填入两个字母，搜索后得到Karl Marx，提交后正确</p>
<p>
最后再把致谢链接放在这里吧 <a href="https://jh2024.jianghujiemi.fun/victory">https://jh2024.jianghujiemi.fun/victory</a></p>
</div>
</div>
</div>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>江湖解谜总结三</title>
      <link>https://wind1900.github.io/puzzlehunt/%E6%B1%9F%E6%B9%96%E8%A7%A3%E8%B0%9C%E6%80%BB%E7%BB%93%E4%B8%89/</link>
      <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/%E6%B1%9F%E6%B9%96%E8%A7%A3%E8%B0%9C%E6%80%BB%E7%BB%93%E4%B8%89/</guid>
      <description>玉虚宫练武 大通灵师 &amp;#34;zl anzr vf ovonv. guvf vf gur zrffntr ba orunys bs gur grfgref. nyy bs bhe zrffntrf ner pnrfne-fuvsgrq, qrfcvgr fbzr znl or gura pvcurerq hfvat ivtrarer. v yvxr cevzr ahzoref, naq zl vq vf bar bs gurz. fnqyl, zl cny nakvnb&amp;#39;f vf abg.&amp;#34;&#xA;w wacz hz hmo aj nabsywjz ypq ai aj xsqccalz qthzzf. qmf aonl, gpf ymewsc lzmsp sfy hsw kgoncwm sluz gcgwk wwysjt cc kwhoazgms.</description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
玉虚宫练武
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<div id="outline-container-headline-2" class="outline-3">
<h3 id="headline-2">
大通灵师
</h3>
<div id="outline-text-headline-2" class="outline-text-3">
<p>&#34;zl anzr vf ovonv. guvf vf gur zrffntr ba orunys bs gur grfgref. nyy bs bhe zrffntrf ner pnrfne-fuvsgrq, qrfcvgr fbzr znl or gura pvcurerq hfvat ivtrarer. v yvxr cevzr ahzoref, naq zl vq vf bar bs gurz. fnqyl, zl cny nakvnb&#39;f vf abg.&#34;</p>
<hr>
<p><figure><img src="https://wind1900.github.io/picx-images-hosting/image.b8ndd9bx2.webp"/>
</figure>

w wacz hz hmo aj nabsywjz ypq ai aj xsqccalz qthzzf. qmf aonl, gpf ymewsc lzmsp sfy hsw kgoncwm sluz gcgwk wwysjt cc kwhoazgms. mml d tzjyzh hzaxv tk ocwnz. xpb qsuo hhg, lcfpw ga hsw lzoxesosd khzov xjzbnz jzowdq rswd. zjkpnwm, hswq ycy&#39;l ddyp egmgp ugys. dhwvytfy jt xgjns, ezw hcckw gcgwj ispvk oc fkw ovp ughdflwm rfjaiu ewko gzdnz, pfl fpamwj awgw vjsdf&#39;l.</p>
<hr>
<p>c ug nby lcxxfy aoymmyl, uhx sym, c mjyue zlyhwb. c ug lyuffs mfijjs qcnb gs mjlyuxmbyyn. nbun&#39;m qbs c ume nby mjlyuxmbyyn guhuayl ni mupy nbcm gymmuay. cm cn ylsoy il nbun xoxy qcnb cx hogvyl nqi? c&#39;g hin moly. mjyuecha iz cxm, gs cx cm mguffyl nbuh nby mfuweyl, uhx nby vlucffy yhnbomcumn bum u alyunyl cx nbuh vinb. qyff, nby yhnbomcumnm uly chnylymncha. ylsoy fipym u wcjbyl qcnb xin, von uhrcui xiymh&#39;n.</p>
<hr>
<p><figure><img src="https://wind1900.github.io/picx-images-hosting/image.3raz5gjsos.webp"/>
</figure>

eky, z&#39;qy jhqydu qlus tkzyk uj dkcuhe sydg ud vhqdsu, s&#39;uij fekhgkey deki fqhbedi jhui ryud vhqdsqyi. kdu qdusteju qckiqdju: xyuh, dejhu fhewhqccukh uj sxudxk iedj iehjyi tyduh, uj ybi edj jeki tukn tusytu tu cetyvyuh sxqskd tu bukhi junjui t&#39;kd cedjqdj ugkylqbudj q bukh fhefhu yt fbki bu fhyn t&#39;kdu fehjyed ceouddu tu hqcud tu bqdpxek.</p>
<hr>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">key</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> potpal[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]</span></span></code></pre></div>
</div>
<p>z gh sbvk vmnamrshdl. rvrg, h bzrxy xynkkmcut knvs vzkczdh xykigo&#39;n zj vmx oyk nkuxbkm&#39;r cy, ftz hm oyk htfozvgd ia knz nncvx. jtl pjkm muhv on nom wghhft eghd imukmdx vcvczvzkoxzfgp. vvrmrfxy hm hp bdfyivxz jyt. rrg hh gfczq wvjk.</p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
解题思路
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<p>遇到乱码不用慌，可以先用<a href="https://www.quipqiup.com/">https://www.quipqiup.com/</a> 看看能不能解出什么。果然可以得到</p>
<ul>
<li>my name is bibai. this is the message on behalf of the testers. all of our messages are caesar-shifted, despite some may be then ciphered using vigenere. i like prime numbers, and my id is one of them. sadly, my pal anxiao&#39;s is not.</li>
</ul>
<p>根据这段话我们能得到题目中的文字被分成五段话，它们都是用的凯撒密码或者维吉尼亚密码加密，还有一些队友的信息。</p>
<p>
第二段的图里是猪圈密码，猪圈密码解出来&#34;KEY HELLO&#34;，再尝试用hello作为维吉尼亚密钥替换原文后使用凯撒解得</p>
<ul>
<li>i like to put my vigenere key in my favorite cipher. fun fact, our number three and the slacker each loves binary or semaphore. but I forget which is which. fun fact two, three of the teammates speak french really well. however, they don&#39;t like morse code. speaking of morse, the morse lover needs to use the computer during test solve, but number five doesn&#39;t.</li>
</ul>
<p>第三段的文字直接使用凯撒解得</p>
<ul>
<li>i am the riddle guesser, and yes, i speak french. i am really sloppy with my spreadsheet. that&#39;s why i ask the spreadsheet manager to save this message. Is it eryue or that dude with id number two? i&#39;m not sure. speaking of ids, my id is smaller than the slacker, and the braille enthusiast has a greater id than both. well, the enthusiasts are interesting. eryue loves a cipher with dot, but anxiao doesn&#39;t.</li>
</ul>
<p>第四段先翻译图片中的旗语，得到foreign language。而第二段里说过有队友是说法语的，果然这段文字所有的凯撒解码都不是英文，对所有的结果尝试翻译后得到只有一个正确的</p>
<ul>
<li>yes, I hung out with dujiu and number five in France, that&#39;s why we speak French very well. a funny story: yesterday, our programmer and chenhu went out to dinner, and they both decided to modify each of their texts by an amount equivalent to their own id plus the price of an average serving of lanzhou ramen.</li>
</ul>
<p>第五段有个像是python的代码，[::-1] 就是将前面的字符串倒序，算是得到了laptop，使用laptop当维吉尼亚密钥解码后再凯撒移位得到</p>
<ul>
<li>i am that programmer. well, i heard yesterday that between chenhu&#39;s id and the slacker&#39;s id, one is the multiple of the other. our user name is our family name ordered alphabetically. password is my vigenere key. all in lower case.</li>
</ul>
<p>这道题最下面开始有个登录界面，根据这五段话可以得到五个队员的名字，用户名是五个人的姓连起来，密码是laptop，输入后得到一个新的选择题，需要解出每个队员的ID，分工和加密偏好才能答对
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.8dwm66vedg.webp"/>
</figure>

这个就是一道逻辑题了，总结上面五段话的信息我们可以得到：</p>
<ul>
<li>总共有五个队员，姓名为anxiao，bibai，chenhu，dujiu，eryue</li>
<li>五个队员角色分别为队长（captain），划水怪（slacker），猜谜王（riddle guesser），文档管理（spreadsheet manager），程序佬（programmer）</li>
<li>五个队员喜欢的密码有猪圈，摩斯，盲文，旗语，二进制</li>
<li>第一个说话的是bibai，bibai的id是质数</li>
<li>anxiao的id不是质数</li>
<li>第二个说话的人喜欢猪圈密码</li>
<li>id为3的人和划水怪两个人喜欢的密码在旗语和二进制中</li>
<li>三个说法语的队友不喜欢摩斯密码</li>
<li>喜欢摩斯密码的人需要使用电脑解谜，id为5的人不用电脑解谜</li>
<li>第三个说话的人是猜谜王，说法语</li>
<li>猜谜王的id比划水怪的小，喜欢盲文的人的id比猜谜王和划水怪都要大</li>
<li>文档管理是eryue或者id是2</li>
<li>eryue喜欢的密码中有点，anxiao喜欢的密码中没有点</li>
<li>第四个说话的人也说法语，另两个是dujiu和id为5的人。</li>
<li>程序佬和chenhu在加密后又凯撒移位了密码（即第二段和第四段话），且位移量都是他们的id加上一个固定值</li>
<li>第五个说话的人是程序佬</li>
<li>chenghu的id和划水怪的id其中一个是另一个的倍数</li>
</ul>
<p>另外这是五段消息的加密方式，注意加密的偏移量并不等于解密用的偏移量，二者相加为26</p>
<table>
<tbody>
<tr>
<td>偏移13</td>
</tr>
<tr>
<td>hello加密后偏移7</td>
</tr>
<tr>
<td>偏移20</td>
</tr>
<tr>
<td>偏移16</td>
</tr>
<tr>
<td>laptop加密后偏移6</td>
</tr>
</tbody>
</table>
<p>
最终可以解出所有的信息，这里仅给出部分结果</p>
<table>
<tbody>
<tr>
<td class="align-right">ID</td>
<td>话</td>
<td>姓名</td>
<td>分工</td>
<td>加密偏好</td>
</tr>
<tr>
<td class="align-right">1</td>
<td></td>
<td></td>
<td>程序佬</td>
<td></td>
</tr>
<tr>
<td class="align-right">2</td>
<td>第二段</td>
<td>chenhu</td>
<td></td>
<td></td>
</tr>
<tr>
<td class="align-right">3</td>
<td>第三段</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td class="align-right">4</td>
<td>第四段</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td class="align-right">5</td>
<td></td>
<td>bibai</td>
<td></td>
<td>盲文</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>江湖解谜总结二</title>
      <link>https://wind1900.github.io/puzzlehunt/%E6%B1%9F%E6%B9%96%E8%A7%A3%E8%B0%9C%E6%80%BB%E7%BB%93%E4%BA%8C/</link>
      <pubDate>Thu, 07 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/%E6%B1%9F%E6%B9%96%E8%A7%A3%E8%B0%9C%E6%80%BB%E7%BB%93%E4%BA%8C/</guid>
      <description>玉虚宫练武 赛博记录员 人工智障模仿人类的第一步——学会写周记。 这道题一开始就是做第一张图里的填空，然后按问号位置提取出字母，填不出所有的也没关系，大致可以猜到结果是什么，比如我最开始能填出来的只有这些&#xA;答案 字母 ? fifa world cup i pleasant goat and big big wolf l arknights i Joshua Barkman b ? ? luckin coffee i jvr music s youth with you w ? league of legends e KFC k ? ? 猜测这些字母组成bilibili&amp;#39;s weekly，而B站确实有个每周必看，但是怎么和下面的图联系起来呢？&#xA;观察图片中的相似处，每个图都有个四位数，像是日期，也都有一个分数，分母都是10。B站视频的id都是十位，那这个分数可能就是用来ID提取，日期有可能是视频的日期，也可能是每周必看的日期，找到每周必看后先找封面是这些图片的视频再找到ID。&#xA;搜索过程中发现，每期必看都在周五更新，而且都有个标题。我第一个尝试的是左下角的图片，8月23日对应的只有第22期，在2019年8月23日更新的，标题是霸道总裁黄晓明。进去看到第一个视频的封面就和题里的十分相似，于是可以明确四位数就是更新日期，再从视频列表中找出相似的原封面和对应视频ID。而这个标题也让我想到第一张图里一个还没填的“今天在某部真人秀里学到了一句强势拒绝别人指手画脚的话呢”，原来下面的视频封面，或者说每周必看标题，也都和上面的答案有关系！&#xA;这样找到所有日期对应的每周必看，通过标题联系到第一张图里每一行并可以填完剩余空格，再找到视频ID，按照图一问题的顺序提取就能得到最终结果。&#xA;不过找相似图片的过程并不是很顺利，有些很难找到到底哪个是原图，比如： 后来队友发现了一个好方法，把眼镜摘掉再看，AI生成的图和原图看起来就一模一样。最终结果就不放出来了，有兴趣的可以试试找这几个图0113，0603，0708，0908。</description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
玉虚宫练武
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<div id="outline-container-headline-2" class="outline-3">
<h3 id="headline-2">
赛博记录员
</h3>
<div id="outline-text-headline-2" class="outline-text-3">
<p>人工智障模仿人类的第一步——学会写周记。
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.4jnuk7mx04.webp"/>
</figure>

<figure><img src="https://wind1900.github.io/picx-images-hosting/extraction[1].60tzlyseea.webp"/>
</figure>
</p>
<p>
这道题一开始就是做第一张图里的填空，然后按问号位置提取出字母，填不出所有的也没关系，大致可以猜到结果是什么，比如我最开始能填出来的只有这些</p>
<table>
<thead>
<tr>
<th>答案</th>
<th>字母</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>?</td>
</tr>
<tr>
<td>fifa world cup</td>
<td>i</td>
</tr>
<tr>
<td>pleasant goat and big big wolf</td>
<td>l</td>
</tr>
<tr>
<td>arknights</td>
<td>i</td>
</tr>
<tr>
<td>Joshua Barkman</td>
<td>b</td>
</tr>
<tr>
<td></td>
<td>?</td>
</tr>
<tr>
<td></td>
<td>?</td>
</tr>
<tr>
<td>luckin coffee</td>
<td>i</td>
</tr>
<tr>
<td>jvr music</td>
<td>s</td>
</tr>
<tr>
<td>youth with you</td>
<td>w</td>
</tr>
<tr>
<td></td>
<td>?</td>
</tr>
<tr>
<td>league of legends</td>
<td>e</td>
</tr>
<tr>
<td>KFC</td>
<td>k</td>
</tr>
<tr>
<td></td>
<td>?</td>
</tr>
<tr>
<td></td>
<td>?</td>
</tr>
</tbody>
</table>
<p>
猜测这些字母组成bilibili&#39;s weekly，而B站确实有个每周必看，但是怎么和下面的图联系起来呢？</p>
<p>
观察图片中的相似处，每个图都有个四位数，像是日期，也都有一个分数，分母都是10。B站视频的id都是十位，那这个分数可能就是用来ID提取，日期有可能是视频的日期，也可能是每周必看的日期，找到每周必看后先找封面是这些图片的视频再找到ID。<br>
搜索过程中发现，每期必看都在周五更新，而且都有个标题。我第一个尝试的是左下角的图片，8月23日对应的只有<a href="https://www.bilibili.com/v/popular/weekly/?num=22">第22期</a>，在2019年8月23日更新的，标题是霸道总裁黄晓明。进去看到第一个视频的封面就和题里的十分相似，于是可以明确四位数就是更新日期，再从视频列表中找出相似的原封面和对应视频ID。而这个标题也让我想到第一张图里一个还没填的“今天在某部真人秀里学到了一句强势拒绝别人指手画脚的话呢”，原来下面的视频封面，或者说每周必看标题，也都和上面的答案有关系！<br>
这样找到所有日期对应的每周必看，通过标题联系到第一张图里每一行并可以填完剩余空格，再找到视频ID，按照图一问题的顺序提取就能得到最终结果。<br>
不过找相似图片的过程并不是很顺利，有些很难找到到底哪个是原图，比如：
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.8hg80xz1m4.webp"/>
</figure>

后来队友发现了一个好方法，把眼镜摘掉再看，AI生成的图和原图看起来就一模一样。最终结果就不放出来了，有兴趣的可以试试找这几个图<a href="https://www.bilibili.com/v/popular/weekly/?num=199">0113</a>，<a href="https://www.bilibili.com/v/popular/weekly/?num=167">0603</a>，<a href="https://www.bilibili.com/v/popular/weekly/?num=172">0708</a>，<a href="https://www.bilibili.com/v/popular/weekly/?num=233">0908</a>。</p>
</div>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>江湖解谜总结一</title>
      <link>https://wind1900.github.io/puzzlehunt/%E6%B1%9F%E6%B9%96%E8%A7%A3%E8%B0%9C%E6%80%BB%E7%BB%93%E4%B8%80/</link>
      <pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/%E6%B1%9F%E6%B9%96%E8%A7%A3%E8%B0%9C%E6%80%BB%E7%BB%93%E4%B8%80/</guid>
      <description> 简介 本次解谜活动由2月23日晚8点开始到3月3日晚8点结束。不像以前都是我一个人参加，这一次找了一支队伍一起做，虽然真正参与的也就两个半人左右，不过解题速度远比一个人快。虽然最终遗憾没有完赛，但在未完赛队伍里排第一名。 这次活动开始一开始还由于过于火爆导致网站无法访问，只能用腾讯文档先放出前三道题，第二天中午网站才能访问。这次的谜题包括信息搜索的，推理的，谐音的，纸笔类的等等，我会选择一些印象深刻的介绍一遍。这次就从第一个区域初入武当开始。&#xA;初入武当 行间字里 首先需要理解第一张图的意思，找出规律。第一个很好理解，“筒”差了竹字头，红色问号就是竹字头。第二个单词看起来是SAFE，女王两个字的形状和左边两个问号形状相同，但为什么问号是女王两个字呢？&#xA;联想到SAFE的中文是“安全”，那安全和女王又有什么联系，就是安全的下半部分为女王，正好也对应了SAFE只显示了下面一半。因此可以推出规律红色问号都代表了一个或部分汉字，形状也与问号形状相同。&#xA;下面就需要解第二张图里的内容了。看起来很杂乱，不过可以逐个分析。&#xA;左上方橙色是“讯”字，绿色是“计”字，那不在绿色圆圈但在橙色圆圈里的部分，即二者之差，问号表示的就是“㇈” 中上有几个化学式，是盐酸HCL和硝酸HNO3，但是不能匹配两个问号，注意到盐酸写了三个，其实是想表达由盐酸和硝酸3:1组成的王水 化学式上面像是DOG的上一半，但“狗”是左右结构的，那会不会是“犬”的上半部分呢，尝试用它和王水组成新的字，果然可以组成“球” 右上角的犬和彡不清楚如何转化成右边的方格，但查询拼音为xiū的字里只有两个是包含彡的：俢修，而拼音为shū且包含犬的字有一个：倏，那大致可以推测出左侧方格就是两个字相同的部分，即亻或亻与丨 右上角方格里的答案没有想到是什么 左上角也有同样的图形，能与下方㇈组成字的只有“气”。现在前两个字就已经推出来了，可以猜测这张图被分成了六个部分，分别对应六个字 左下角PULL和PUSH表示拉和推，那问号应该是“扌”，但是一和黄色怎么对应没有想到 下方中间是简单的数字与字母对应，如果是字母序，那13应该是M，13是K的情况可以联想到扑克牌，那么11就是J，和J相似的汉字是“丁” 右边有三个半多字，但是这里不能把它当成多字，而是“夕”，那么三个半多就是七夕，上下两个问号分别就是“七”和“夕”。 右下角五角星变为五边形，两条线应该也变成一个多边形，而且这个字上面是“夕”，那么只有可能是“名”，再看两条线为什么变成长方形，两者联系应为把左边形状的顶点相连组成右边的图形。 至此我推出了大部分，已知的信息是&#xA;气 球 ？亻七 扌 丁 名 可以和丁名组成词的应该是“拉”丁名，而右上角的字像包含化，且可以和气球组成词，猜测是“花”字，那么最终结果为气球花拉丁名，输入答案结果正确。&#xA;看过解析后，也明白了没推出来的部分。&#xA;音≈风险 义≈付出即这个词读音和fengxian相似，意思为付出，那就是奉献，倒过来问号部分即为“艹”，能和下面组成“花” 一为黄，指的是横线为黄，即横的右边，那么竖对应下半部分“立”，和扌组成了拉 </description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
简介
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>本次<a href="https://jh2024.jianghujiemi.fun/">解谜活动</a>由2月23日晚8点开始到3月3日晚8点结束。不像以前都是我一个人参加，这一次找了一支队伍一起做，虽然真正参与的也就两个半人左右，不过解题速度远比一个人快。虽然最终遗憾没有完赛，但在未完赛队伍里排第一名。
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.syourrvax.webp"/>
</figure>

这次活动开始一开始还由于过于火爆导致网站无法访问，只能用腾讯文档先放出前三道题，第二天中午网站才能访问。这次的谜题包括信息搜索的，推理的，谐音的，纸笔类的等等，我会选择一些印象深刻的介绍一遍。这次就从第一个区域初入武当开始。</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
初入武当
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
行间字里
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<p><figure><img src="https://wind1900.github.io/picx-images-hosting/byline_1[1].32hpfmxo13.webp"/>
</figure>

<figure><img src="https://wind1900.github.io/picx-images-hosting/image.1lbkdvuvn2.webp"/>
</figure>

首先需要理解第一张图的意思，找出规律。第一个很好理解，“筒”差了竹字头，红色问号就是竹字头。第二个单词看起来是SAFE，女王两个字的形状和左边两个问号形状相同，但为什么问号是女王两个字呢？<br>
联想到SAFE的中文是“安全”，那安全和女王又有什么联系，就是安全的下半部分为女王，正好也对应了SAFE只显示了下面一半。因此可以推出规律红色问号都代表了一个或部分汉字，形状也与问号形状相同。<br>
下面就需要解第二张图里的内容了。看起来很杂乱，不过可以逐个分析。</p>
<ul>
<li>左上方橙色是“讯”字，绿色是“计”字，那不在绿色圆圈但在橙色圆圈里的部分，即二者之差，问号表示的就是“㇈”</li>
<li>中上有几个化学式，是盐酸HCL和硝酸HNO<sub>3</sub>，但是不能匹配两个问号，注意到盐酸写了三个，其实是想表达由盐酸和硝酸3:1组成的王水</li>
<li>化学式上面像是DOG的上一半，但“狗”是左右结构的，那会不会是“犬”的上半部分呢，尝试用它和王水组成新的字，果然可以组成“球”</li>
<li>右上角的犬和彡不清楚如何转化成右边的方格，但查询拼音为xiū的字里只有两个是包含彡的：俢修，而拼音为shū且包含犬的字有一个：倏，那大致可以推测出左侧方格就是两个字相同的部分，即亻或亻与丨</li>
<li>右上角方格里的答案没有想到是什么</li>
<li>左上角也有同样的图形，能与下方㇈组成字的只有“气”。现在前两个字就已经推出来了，可以猜测这张图被分成了六个部分，分别对应六个字</li>
<li>左下角PULL和PUSH表示拉和推，那问号应该是“扌”，但是一和黄色怎么对应没有想到</li>
<li>下方中间是简单的数字与字母对应，如果是字母序，那13应该是M，13是K的情况可以联想到扑克牌，那么11就是J，和J相似的汉字是“丁”</li>
<li>右边有三个半多字，但是这里不能把它当成多字，而是“夕”，那么三个半多就是七夕，上下两个问号分别就是“七”和“夕”。</li>
<li>右下角五角星变为五边形，两条线应该也变成一个多边形，而且这个字上面是“夕”，那么只有可能是“名”，再看两条线为什么变成长方形，两者联系应为把左边形状的顶点相连组成右边的图形。</li>
<li>
<p>至此我推出了大部分，已知的信息是</p>
<table>
<tbody>
<tr>
<td>气</td>
<td>球</td>
<td>？亻七</td>
</tr>
<tr>
<td>扌</td>
<td>丁</td>
<td>名</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>可以和丁名组成词的应该是“拉”丁名，而右上角的字像包含化，且可以和气球组成词，猜测是“花”字，那么最终结果为气球花拉丁名，输入答案结果正确。<br>
看过解析后，也明白了没推出来的部分。</p>
<ul>
<li>音≈风险 义≈付出即这个词读音和fengxian相似，意思为付出，那就是奉献，倒过来问号部分即为“艹”，能和下面组成“花”</li>
<li>一为黄，指的是横线为黄，即横的右边，那么竖对应下半部分“立”，和扌组成了拉</li>
</ul>
</div>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>龙腾喵跃红包封面解谜</title>
      <link>https://wind1900.github.io/puzzlehunt/%E9%BE%99%E8%85%BE%E5%96%B5%E8%B7%83%E7%BA%A2%E5%8C%85%E5%B0%81%E9%9D%A2%E8%A7%A3%E8%B0%9C/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/%E9%BE%99%E8%85%BE%E5%96%B5%E8%B7%83%E7%BA%A2%E5%8C%85%E5%B0%81%E9%9D%A2%E8%A7%A3%E8%B0%9C/</guid>
      <description> 首先注意红色的部分，一共四行，每行前两个字都标为红色。“莫思”最能引起我的联想，即摩斯密码，那其它三行也应该是一种编码的名称谐音，四行分别为：五笔，旗语，摩斯，棋盘。每行后面标记为红色的部位，或能看成字母，或能看成数字，或者是特定编码用到的图形，翻译后得到：&#xA;五笔：空拍 旗语：weikong 摩斯：jiezou 棋盘：shangse 怎么给节奏上色？当时没想明白。其实多观察一下乐谱的格式就能发现，每一列的节奏型都很相似，如果转化为一个表格再上色，有可能会解出答案。后来要了提示知道了解法： 按照表格填色后即可得到答案LONG JUMP，也祝大家龙年龙腾喵跃。&#xA;题目链接 https://mp.weixin.qq.com/s/AF8BJjf07MjLq34hA1ncjg </description>
      <content:encoded><![CDATA[
<p>
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.2ob94j2o0j.webp"/>
</figure>
</p>
<p>
首先注意红色的部分，一共四行，每行前两个字都标为红色。“莫思”最能引起我的联想，即摩斯密码，那其它三行也应该是一种编码的名称谐音，四行分别为：五笔，旗语，摩斯，棋盘。每行后面标记为红色的部位，或能看成字母，或能看成数字，或者是特定编码用到的图形，翻译后得到：</p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>  五笔：空拍
</span></span><span style="display:flex;"><span>  旗语：weikong
</span></span><span style="display:flex;"><span>  摩斯：jiezou
</span></span><span style="display:flex;"><span>  棋盘：shangse</span></span></code></pre></div>
</div>
<p>
怎么给节奏上色？当时没想明白。其实多观察一下乐谱的格式就能发现，每一列的节奏型都很相似，如果转化为一个表格再上色，有可能会解出答案。后来要了提示知道了解法：
<figure><img src="https://wind1900.github.io/picx-images-hosting/6786a973e2281afb4cfa97cb2646770.54xhjkvdmq.webp"/>
</figure>
</p>
<p>
按照表格填色后即可得到答案LONG JUMP，也祝大家龙年龙腾喵跃。</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
题目链接
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<ul>
<li><a href="https://mp.weixin.qq.com/s/AF8BJjf07MjLq34hA1ncjg">https://mp.weixin.qq.com/s/AF8BJjf07MjLq34hA1ncjg</a></li>
</ul>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>58anY 解析</title>
      <link>https://wind1900.github.io/ctf/58any_%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/ctf/58any_%E8%A7%A3%E6%9E%90/</guid>
      <description>本题是egelloc.nwp的reverse的最后一题，为了避免泄露答案，所有的单词均以倒序拼写。根据前面几关的练习，已知这道题自定义了一个模拟器，拥有自己的指令，寄存器和内存，需要你输入模拟器指令来拿到flag。但是与前面的题目不同的是，指令和寄存器的标志都是随机的，不是固定的，无法通过静态分析获得，因此需要根据现有已知的条件动态推断出所有的指令和寄存器等。&#xA;58anY 的体系结构 内存 内存由一个byte[1024]的数组a构成。内存的前768个byte为代码段，保存用户输入的指令。768后的内存为数据段，数据存储的地址从0开始。因为栈寄存器起始为0，a[768]往后的一段空间应仅供栈使用，避免出现冲突。&#xA;寄存器 寄存器包括4个通用寄存器a b c d, 栈寄存器s，指令寄存器i以及标志寄存器f 。寄存器地址紧跟在内存后面，因此在代码中也用a[1024]~a[1030]来访问。在指令中由不同的操作数代表不同寄存器，每个操作数的二进制只有一位为1，即用1，2，4，8，16，32，64，128中的7个来代表寄存器。由于模拟器运行时会随机打乱操作数的顺序，无法通过静态分析知道操作数与寄存器的对应关系&#xA;指令 每个指令长度为3 bytes，指令与两个操作数各用一个byte，但是指令与操作数的位置每道题不一样，仅在最后构造读取flag指令的时候需要注意。每个指令也由20~27这8个数来表示，对应关系未知。&#xA;imm op1, op2 将op2表示的数存入op1表示的寄存器 add op1, op2 将op2表示的寄存器的值加到op1表示的寄存器 stk op1, op2 栈操作，op2不为0时，将op2表示的寄存器中的值入栈，op1不为0时,再将栈顶数出栈于op1表示的寄存器 stm op1, op2 以op1表示的寄存器中的值作为地址,写入op2表示的寄存器中的值 ldm op1, op2 以op2表示的寄存器中的值作为地址，读取数据并存入op1表示的寄存器 cmp op1, op2 比较op1和op2表示的寄存器中的值，并根据大小，是否相等设置相关标志位 jmp op1, op2 op1为0时，无条件跳转到op2表示的寄存器中的值，op1不为0时，判断op1和标志寄存器与的结果，不为0则跳转到op2表示的寄存器中的值，通过修改指令寄存器的值实现跳转 sys op1, op2 根据op1的值进行不同的系统调用，并将结果存入op2表示的寄存器（exit不需要将结果存入寄存器）。系统调用需要的参数通过寄存器a,b,c传入 指令描述 系统调用 该模拟器实现的系统调用有open, read, write, sleep, exit等，使用open, read, write即可读取flag并打印。&#xA;已知条件 虽然随机打乱了寄存器，指令，系统调用和标志位的顺序，我们仍可以观察程序运行的状态来推测出一些指令和寄存器的标志。以下是代码流程中一些需要注意的地方：&#xA;随机打乱的函数中调用的是rand()而非没有srand()，即每次产生的随机数序列都是相同的，寄存器，指令与操作码的对应关系不会改变。 判断指令使用的是and操作，顺序参照上表顺序，若指令有多位为1，则会执行多条指令，若指令为0，则没有对应指令执行，不会报错，继续执行下一条指令。 指令寄存器i从0开始每执行一条指令就加1，代码段最开始都会置0，如果程序没有终止，那指令寄存器就会从0一直加到0xFF，之后加一溢出重新变为0，达到死循环状态。 与寄存器相关的操作都使用==进行判断操作数对应哪个寄存器，如果没找到对应寄存器或使用0为操作数，则会报错输出&amp;#34;unknown register&amp;#34;并退出程序。 判断系统调用使用and操作，若有多位位1，则会执行多个系统调用，若没找到对应系统调用，不会报错，继续执行下一条指令。 推断过程 通过构建不同的指令，根据程序执行的状态是退出或者死循环来逐步推测出指令，寄存器，和系统调用的对应关系。&#xA;寻找无效寄存器 将指令码设置为0xff，那么一定会执行imm，再遍历所有寄存器标志，如果程序退出并输出&amp;#34;unknown register&amp;#34;，那么该标志为 register_invalid 。</description>
      <content:encoded><![CDATA[
<p>
本题是egelloc.nwp的reverse的最后一题，为了避免泄露答案，所有的单词均以倒序拼写。根据前面几关的练习，已知这道题自定义了一个模拟器，拥有自己的指令，寄存器和内存，需要你输入模拟器指令来拿到flag。但是与前面的题目不同的是，指令和寄存器的标志都是随机的，不是固定的，无法通过静态分析获得，因此需要根据现有已知的条件动态推断出所有的指令和寄存器等。</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
58anY 的体系结构
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<div id="outline-container-headline-2" class="outline-3">
<h3 id="headline-2">
内存
</h3>
<div id="outline-text-headline-2" class="outline-text-3">
<p>内存由一个byte[1024]的数组a构成。内存的前768个byte为代码段，保存用户输入的指令。768后的内存为数据段，数据存储的地址从0开始。因为栈寄存器起始为0，a[768]往后的一段空间应仅供栈使用，避免出现冲突。</p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
寄存器
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<p>寄存器包括4个通用寄存器a b c d, 栈寄存器s，指令寄存器i以及标志寄存器f 。寄存器地址紧跟在内存后面，因此在代码中也用a[1024]~a[1030]来访问。在指令中由不同的操作数代表不同寄存器，每个操作数的二进制只有一位为1，即用1，2，4，8，16，32，64，128中的7个来代表寄存器。由于模拟器运行时会随机打乱操作数的顺序，无法通过静态分析知道操作数与寄存器的对应关系</p>
</div>
</div>
<div id="outline-container-headline-4" class="outline-3">
<h3 id="headline-4">
指令
</h3>
<div id="outline-text-headline-4" class="outline-text-3">
<p>每个指令长度为3 bytes，指令与两个操作数各用一个byte，但是指令与操作数的位置每道题不一样，仅在最后构造读取flag指令的时候需要注意。每个指令也由2<sup>0</sup>~2<sup>7</sup>这8个数来表示，对应关系未知。</p>
<figure>
<table>
<tbody>
<tr>
<td>imm op1, op2</td>
<td>将op2表示的数存入op1表示的寄存器</td>
</tr>
<tr>
<td>add op1, op2</td>
<td>将op2表示的寄存器的值加到op1表示的寄存器</td>
</tr>
<tr>
<td>stk op1, op2</td>
<td>栈操作，op2不为0时，将op2表示的寄存器中的值入栈，op1不为0时,再将栈顶数出栈于op1表示的寄存器</td>
</tr>
<tr>
<td>stm op1, op2</td>
<td>以op1表示的寄存器中的值作为地址,写入op2表示的寄存器中的值</td>
</tr>
<tr>
<td>ldm op1, op2</td>
<td>以op2表示的寄存器中的值作为地址，读取数据并存入op1表示的寄存器</td>
</tr>
<tr>
<td>cmp op1, op2</td>
<td>比较op1和op2表示的寄存器中的值，并根据大小，是否相等设置相关标志位</td>
</tr>
<tr>
<td>jmp op1, op2</td>
<td>op1为0时，无条件跳转到op2表示的寄存器中的值，op1不为0时，判断op1和标志寄存器与的结果，不为0则跳转到op2表示的寄存器中的值，通过修改指令寄存器的值实现跳转</td>
</tr>
<tr>
<td>sys op1, op2</td>
<td>根据op1的值进行不同的系统调用，并将结果存入op2表示的寄存器（exit不需要将结果存入寄存器）。系统调用需要的参数通过寄存器a,b,c传入</td>
</tr>
</tbody>
</table>
<figcaption>
指令描述
</figcaption>
</figure>
</div>
</div>
<div id="outline-container-headline-5" class="outline-3">
<h3 id="headline-5">
系统调用
</h3>
<div id="outline-text-headline-5" class="outline-text-3">
<p>该模拟器实现的系统调用有open, read, write, sleep, exit等，使用open, read, write即可读取flag并打印。</p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-6" class="outline-2">
<h2 id="headline-6">
已知条件
</h2>
<div id="outline-text-headline-6" class="outline-text-2">
<p>虽然随机打乱了寄存器，指令，系统调用和标志位的顺序，我们仍可以观察程序运行的状态来推测出一些指令和寄存器的标志。以下是代码流程中一些需要注意的地方：</p>
<ul>
<li>随机打乱的函数中调用的是rand()而非没有srand()，即每次产生的随机数序列都是相同的，寄存器，指令与操作码的对应关系不会改变。</li>
<li>判断指令使用的是and操作，顺序参照上表顺序，若指令有多位为1，则会执行多条指令，若指令为0，则没有对应指令执行，不会报错，继续执行下一条指令。</li>
<li>指令寄存器i从0开始每执行一条指令就加1，代码段最开始都会置0，如果程序没有终止，那指令寄存器就会从0一直加到0xFF，之后加一溢出重新变为0，达到死循环状态。</li>
<li>与寄存器相关的操作都使用==进行判断操作数对应哪个寄存器，如果没找到对应寄存器或使用0为操作数，则会报错输出&#34;unknown register&#34;并退出程序。</li>
<li>判断系统调用使用and操作，若有多位位1，则会执行多个系统调用，若没找到对应系统调用，不会报错，继续执行下一条指令。</li>
</ul>
</div>
</div>
<div id="outline-container-headline-7" class="outline-2">
<h2 id="headline-7">
推断过程
</h2>
<div id="outline-text-headline-7" class="outline-text-2">
<p>通过构建不同的指令，根据程序执行的状态是退出或者死循环来逐步推测出指令，寄存器，和系统调用的对应关系。</p>
<div id="outline-container-headline-8" class="outline-3">
<h3 id="headline-8">
寻找无效寄存器
</h3>
<div id="outline-text-headline-8" class="outline-text-3">
<p>将指令码设置为0xff，那么一定会执行imm，再遍历所有寄存器标志，如果程序退出并输出&#34;unknown register&#34;，那么该标志为 <code>register_invalid</code> 。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> register <span style="color:#f92672">in</span> set([<span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x02</span>, <span style="color:#ae81ff">0x04</span>, <span style="color:#ae81ff">0x08</span>, <span style="color:#ae81ff">0x10</span>, <span style="color:#ae81ff">0x20</span>, <span style="color:#ae81ff">0x40</span>, <span style="color:#ae81ff">0x80</span>]):
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">0xff</span> register, register</span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-9" class="outline-3">
<h3 id="headline-9">
寻找sys指令和exit系统调用
</h3>
<div id="outline-text-headline-9" class="outline-text-3">
<p>遍历指令码和系统调用，并将op2设置为 <code>register_invalid</code> ，那么当程序退出且没有输出&#34;unknown register&#34;的时候，即为通过exit退出。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># try to construct:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># [sys] [exit], register_invalid</span>
</span></span><span style="display:flex;"><span>  possible_values <span style="color:#f92672">=</span> set([<span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x02</span>, <span style="color:#ae81ff">0x04</span>, <span style="color:#ae81ff">0x08</span>, <span style="color:#ae81ff">0x10</span>, <span style="color:#ae81ff">0x20</span>, <span style="color:#ae81ff">0x40</span>, <span style="color:#ae81ff">0x80</span>])
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> instruction <span style="color:#f92672">in</span> possible_values:
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> syscall <span style="color:#f92672">in</span> possible_values:
</span></span><span style="display:flex;"><span>          instruction syscall, register_invalid</span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-10" class="outline-3">
<h3 id="headline-10">
寻找imm指令和指令寄存器i
</h3>
<div id="outline-text-headline-10" class="outline-text-3">
<p>现在已知sys指令，从剩余指令和所有寄存器中遍历，并将op2设置为 <code>register_invalid</code> ，然后添加一条无效寄存器的指令来终止程序。在剩下的指令中add，stk，stm，ldm，cmp，jmp都会因为op2为无效寄存器而退出，只有imm改变指令寄存器i设置的情况会使程序进入死循环。另外要注意特殊情况，当register_invalid==1的时候，指令寄存器i被置为1，执行第二条无效语句也会退出，因此多加一条imm语句使终止程序的语句后移。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># try to construct:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># [imm] [i], register_invalid</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># 0xff register_invalid, register_invalid</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> inst <span style="color:#f92672">in</span> get_possible_instructions():
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> op1 <span style="color:#f92672">in</span> get_possible_registers():
</span></span><span style="display:flex;"><span>          inst op1, register_invalid
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">if</span> register_invalid <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>              inst op1, register_invalid
</span></span><span style="display:flex;"><span>          <span style="color:#ae81ff">0xff</span> register_invalid, register_invalid <span style="color:#75715e"># 用来终止程序</span></span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-11" class="outline-3">
<h3 id="headline-11">
寻找stk指令
</h3>
<div id="outline-text-headline-11" class="outline-text-3">
<p>使用stk指令将寄存器i置为0以达到死循环的目的，若指令不为stk，则会导致程序退出。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># try to construct:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># [stk] i, 0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm  register_invalid, 0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> inst <span style="color:#f92672">in</span> get_possible_instructions():
</span></span><span style="display:flex;"><span>      inst i, <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>      imm register_invalid, <span style="color:#ae81ff">0</span></span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-12" class="outline-3">
<h3 id="headline-12">
寻找栈寄存器s
</h3>
<div id="outline-text-headline-12" class="outline-text-3">
<p>使用stk指令操作栈寄存器s，注意stk指令在两个操作数均不为0时会依次进行入栈和出栈操作，入栈时会先将栈寄存器加一，再存入数据。因此使用指令 <code>stk i, s</code> 会使指令寄存器变为1进而执行无效寄存器指令退出。其它寄存器会使指令寄存器始终为0进入死循环。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># try to construct:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># stk i, [s]</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm register_invalid, 0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> register_s <span style="color:#f92672">in</span> get_possible_registers():
</span></span><span style="display:flex;"><span>      stk i, register_s
</span></span><span style="display:flex;"><span>      imm register_invalid, <span style="color:#ae81ff">0</span></span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-13" class="outline-3">
<h3 id="headline-13">
寻找ldm指令
</h3>
<div id="outline-text-headline-13" class="outline-text-3">
<p>目前未知的指令还有add，stm，ldm，cmp，jmp，使用指令 <code>ldm i, s</code> 会使指令寄存器始终为0进入死循环，而其它指令会继续执行遇到无效寄存器指令退出。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># try to construct:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># [ldm] i, s</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm register_invalid, 0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> inst <span style="color:#f92672">in</span> get_possible_instructions():
</span></span><span style="display:flex;"><span>      inst i, s
</span></span><span style="display:flex;"><span>      imm register_invalid, <span style="color:#ae81ff">0</span></span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-14" class="outline-3">
<h3 id="headline-14">
寻找stm指令
</h3>
<div id="outline-text-headline-14" class="outline-text-3">
<p>目前未知的指令还有add，stm，cmp，jmp，已知寄存器只有s和i。寻找stm的思路就是随机选择另一个寄存器 <code>reg</code> （通用寄存器或标志寄存器）， 配合stm与ldm来对指令寄存器赋值，跳转到第4条无效寄存器指令退出。如果是add，cmp指令，内存中不会写入4，赋给指令寄存器的值为0，进入死循环。如果是jmp指令 <code>jmp reg, s</code> ，需要判断 <code>reg</code> 是否为标志寄存器，若不为标志寄存器，则不会发生跳转，若刚好随机选择了标志寄存器，为了防止跳转到第4条指令，需要使跳转条件不成立，因此将 <code>reg</code> 的值设为 <code>0xff-reg</code> ，两个数的与为0，不会跳转。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># try to construct:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm reg, 0xff-reg</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm s, 4</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># [stm] reg, s</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># ldm i, reg</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm register_invalid, 0</span>
</span></span><span style="display:flex;"><span>  reg <span style="color:#f92672">=</span> get_possible_registers()<span style="color:#f92672">.</span>pop()
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> inst <span style="color:#f92672">in</span> get_possible_instructions():
</span></span><span style="display:flex;"><span>      imm reg, <span style="color:#ae81ff">0xff</span><span style="color:#f92672">-</span>reg
</span></span><span style="display:flex;"><span>      imm s, <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span>      inst reg, s
</span></span><span style="display:flex;"><span>      ldm i, reg
</span></span><span style="display:flex;"><span>      imm register_invalid, <span style="color:#ae81ff">0</span></span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-15" class="outline-3">
<h3 id="headline-15">
寻找write系统调用
</h3>
<div id="outline-text-headline-15" class="outline-text-3">
<p>虽然仍然不能区分剩下的通用寄存器和标志寄存器，但是我们知道标准输出的描述符是1，因此可以将这五个寄存器的的值都设为1，在内存地址1的地方写入一个特殊字符，遍历系统调用检查是否打印了特殊字符。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># try to construct:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm abcdf, 1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm s, 0x99</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># stm a, s</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># sys [write], register_invalid</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> syscall <span style="color:#f92672">in</span> get_possible_syscalls():
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> r <span style="color:#f92672">in</span> get_possible_registers():
</span></span><span style="display:flex;"><span>          imm r, <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      imm s, <span style="color:#ae81ff">0x99</span>
</span></span><span style="display:flex;"><span>      stm a, s
</span></span><span style="display:flex;"><span>      sys syscall, register_invalid</span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-16" class="outline-3">
<h3 id="headline-16">
寻找通用寄存器abc
</h3>
<div id="outline-text-headline-16" class="outline-text-3">
<p>知道write系统调用后，可以尝试构造一个特殊字符串，遍历寄存器abc并调用write检查输出来找到这三个寄存器。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># try to construct:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm [a], 1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm [b], 0x92</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># stm [b], [b]</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm [b], 0x91</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># stm [b], [b]</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm b, 0x90</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># stm [b], [b]</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm [c], 3</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># sys write, register_invalid</span></span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-17" class="outline-3">
<h3 id="headline-17">
寻找sleep系统调用
</h3>
<div id="outline-text-headline-17" class="outline-text-3">
<p>将寄存器a设为一个较大的值，遍历剩余系统调用，过了很久还没退出的则是sleep。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># try to construct:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm a, 80</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm b, 0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm c, 0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># sys [sleep], register_invalid</span></span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-18" class="outline-3">
<h3 id="headline-18">
寻找open read系统调用
</h3>
<div id="outline-text-headline-18" class="outline-text-3">
<p>在本机新建一个临时文本文件，遍历剩余系统调用尝试打开文件并读取文件内容，然后使用write输出，若能成功输出内容则找到了open和read。代码略。</p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-19" class="outline-2">
<h2 id="headline-19">
总结
</h2>
<div id="outline-text-headline-19" class="outline-text-2">
<p>在推测出open，read后，就可以读取flag并用write输出的控制台了。</p>
</div>
</div>
<div id="outline-container-headline-20" class="outline-2">
<h2 id="headline-20">
参考
</h2>
<div id="outline-text-headline-20" class="outline-text-2">
<ul>
<li><a href="https://www.digitalwhisper.co.il/files/Zines/0x91/DW145-6-Yan85_SideChannel.pdf"> Side-Channel ומתקפות anY58 על ארכיטקטורת</a></li>
</ul>
</div>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>
